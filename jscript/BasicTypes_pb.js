/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var Timestamp_pb = require('./Timestamp_pb.js');
var Duration_pb = require('./Duration_pb.js');
goog.exportSymbol('proto.proto.AccountID', null, global);
goog.exportSymbol('proto.proto.ContractID', null, global);
goog.exportSymbol('proto.proto.FeeComponents', null, global);
goog.exportSymbol('proto.proto.FeeData', null, global);
goog.exportSymbol('proto.proto.FeeSchedule', null, global);
goog.exportSymbol('proto.proto.FileID', null, global);
goog.exportSymbol('proto.proto.HederaFunctionality', null, global);
goog.exportSymbol('proto.proto.Key', null, global);
goog.exportSymbol('proto.proto.KeyList', null, global);
goog.exportSymbol('proto.proto.NodeAddress', null, global);
goog.exportSymbol('proto.proto.NodeAddressBook', null, global);
goog.exportSymbol('proto.proto.RealmID', null, global);
goog.exportSymbol('proto.proto.ShardID', null, global);
goog.exportSymbol('proto.proto.Signature', null, global);
goog.exportSymbol('proto.proto.SignatureList', null, global);
goog.exportSymbol('proto.proto.ThresholdKey', null, global);
goog.exportSymbol('proto.proto.ThresholdSignature', null, global);
goog.exportSymbol('proto.proto.TransactionFeeSchedule', null, global);
goog.exportSymbol('proto.proto.TransactionID', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.ShardID = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.ShardID, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.ShardID.displayName = 'proto.proto.ShardID';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.ShardID.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.ShardID.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.ShardID} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ShardID.toObject = function(includeInstance, msg) {
  var f, obj = {
    shardnum: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.ShardID}
 */
proto.proto.ShardID.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.ShardID;
  return proto.proto.ShardID.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.ShardID} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.ShardID}
 */
proto.proto.ShardID.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setShardnum(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.ShardID.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.ShardID.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.ShardID} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ShardID.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getShardnum();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 shardNum = 1;
 * @return {number}
 */
proto.proto.ShardID.prototype.getShardnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.ShardID.prototype.setShardnum = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.RealmID = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.RealmID, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.RealmID.displayName = 'proto.proto.RealmID';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.RealmID.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.RealmID.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.RealmID} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.RealmID.toObject = function(includeInstance, msg) {
  var f, obj = {
    shardnum: jspb.Message.getFieldWithDefault(msg, 1, 0),
    realmnum: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.RealmID}
 */
proto.proto.RealmID.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.RealmID;
  return proto.proto.RealmID.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.RealmID} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.RealmID}
 */
proto.proto.RealmID.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setShardnum(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRealmnum(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.RealmID.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.RealmID.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.RealmID} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.RealmID.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getShardnum();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getRealmnum();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional int64 shardNum = 1;
 * @return {number}
 */
proto.proto.RealmID.prototype.getShardnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.RealmID.prototype.setShardnum = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 realmNum = 2;
 * @return {number}
 */
proto.proto.RealmID.prototype.getRealmnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.RealmID.prototype.setRealmnum = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.AccountID = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.AccountID, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.AccountID.displayName = 'proto.proto.AccountID';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.AccountID.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.AccountID.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.AccountID} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.AccountID.toObject = function(includeInstance, msg) {
  var f, obj = {
    shardnum: jspb.Message.getFieldWithDefault(msg, 1, 0),
    realmnum: jspb.Message.getFieldWithDefault(msg, 2, 0),
    accountnum: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.AccountID}
 */
proto.proto.AccountID.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.AccountID;
  return proto.proto.AccountID.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.AccountID} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.AccountID}
 */
proto.proto.AccountID.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setShardnum(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRealmnum(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAccountnum(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.AccountID.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.AccountID.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.AccountID} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.AccountID.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getShardnum();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getRealmnum();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getAccountnum();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional int64 shardNum = 1;
 * @return {number}
 */
proto.proto.AccountID.prototype.getShardnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.AccountID.prototype.setShardnum = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 realmNum = 2;
 * @return {number}
 */
proto.proto.AccountID.prototype.getRealmnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.AccountID.prototype.setRealmnum = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 accountNum = 3;
 * @return {number}
 */
proto.proto.AccountID.prototype.getAccountnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.proto.AccountID.prototype.setAccountnum = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.FileID = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.FileID, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.FileID.displayName = 'proto.proto.FileID';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.FileID.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.FileID.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.FileID} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FileID.toObject = function(includeInstance, msg) {
  var f, obj = {
    shardnum: jspb.Message.getFieldWithDefault(msg, 1, 0),
    realmnum: jspb.Message.getFieldWithDefault(msg, 2, 0),
    filenum: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.FileID}
 */
proto.proto.FileID.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.FileID;
  return proto.proto.FileID.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.FileID} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.FileID}
 */
proto.proto.FileID.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setShardnum(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRealmnum(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFilenum(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.FileID.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.FileID.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.FileID} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FileID.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getShardnum();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getRealmnum();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getFilenum();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional int64 shardNum = 1;
 * @return {number}
 */
proto.proto.FileID.prototype.getShardnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.FileID.prototype.setShardnum = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 realmNum = 2;
 * @return {number}
 */
proto.proto.FileID.prototype.getRealmnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.FileID.prototype.setRealmnum = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 fileNum = 3;
 * @return {number}
 */
proto.proto.FileID.prototype.getFilenum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.proto.FileID.prototype.setFilenum = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.ContractID = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.ContractID, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.ContractID.displayName = 'proto.proto.ContractID';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.ContractID.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.ContractID.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.ContractID} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ContractID.toObject = function(includeInstance, msg) {
  var f, obj = {
    shardnum: jspb.Message.getFieldWithDefault(msg, 1, 0),
    realmnum: jspb.Message.getFieldWithDefault(msg, 2, 0),
    contractnum: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.ContractID}
 */
proto.proto.ContractID.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.ContractID;
  return proto.proto.ContractID.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.ContractID} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.ContractID}
 */
proto.proto.ContractID.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setShardnum(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRealmnum(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setContractnum(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.ContractID.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.ContractID.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.ContractID} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ContractID.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getShardnum();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getRealmnum();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getContractnum();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional int64 shardNum = 1;
 * @return {number}
 */
proto.proto.ContractID.prototype.getShardnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.ContractID.prototype.setShardnum = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 realmNum = 2;
 * @return {number}
 */
proto.proto.ContractID.prototype.getRealmnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.ContractID.prototype.setRealmnum = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 contractNum = 3;
 * @return {number}
 */
proto.proto.ContractID.prototype.getContractnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.proto.ContractID.prototype.setContractnum = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.TransactionID = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.TransactionID, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.TransactionID.displayName = 'proto.proto.TransactionID';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.TransactionID.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.TransactionID.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.TransactionID} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.TransactionID.toObject = function(includeInstance, msg) {
  var f, obj = {
    accountid: (f = msg.getAccountid()) && proto.proto.AccountID.toObject(includeInstance, f),
    transactionvalidstart: (f = msg.getTransactionvalidstart()) && Timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.TransactionID}
 */
proto.proto.TransactionID.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.TransactionID;
  return proto.proto.TransactionID.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.TransactionID} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.TransactionID}
 */
proto.proto.TransactionID.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.proto.AccountID;
      reader.readMessage(value,proto.proto.AccountID.deserializeBinaryFromReader);
      msg.setAccountid(value);
      break;
    case 1:
      var value = new Timestamp_pb.Timestamp;
      reader.readMessage(value,Timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTransactionvalidstart(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.TransactionID.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.TransactionID.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.TransactionID} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.TransactionID.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccountid();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.proto.AccountID.serializeBinaryToWriter
    );
  }
  f = message.getTransactionvalidstart();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      Timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional AccountID accountID = 2;
 * @return {?proto.proto.AccountID}
 */
proto.proto.TransactionID.prototype.getAccountid = function() {
  return /** @type{?proto.proto.AccountID} */ (
    jspb.Message.getWrapperField(this, proto.proto.AccountID, 2));
};


/** @param {?proto.proto.AccountID|undefined} value */
proto.proto.TransactionID.prototype.setAccountid = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.proto.TransactionID.prototype.clearAccountid = function() {
  this.setAccountid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.TransactionID.prototype.hasAccountid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Timestamp transactionValidStart = 1;
 * @return {?proto.proto.Timestamp}
 */
proto.proto.TransactionID.prototype.getTransactionvalidstart = function() {
  return /** @type{?proto.proto.Timestamp} */ (
    jspb.Message.getWrapperField(this, Timestamp_pb.Timestamp, 1));
};


/** @param {?proto.proto.Timestamp|undefined} value */
proto.proto.TransactionID.prototype.setTransactionvalidstart = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.proto.TransactionID.prototype.clearTransactionvalidstart = function() {
  this.setTransactionvalidstart(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.TransactionID.prototype.hasTransactionvalidstart = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.Key = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.proto.Key.oneofGroups_);
};
goog.inherits(proto.proto.Key, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.Key.displayName = 'proto.proto.Key';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.proto.Key.oneofGroups_ = [[1,2,3,4,5,6]];

/**
 * @enum {number}
 */
proto.proto.Key.KeyCase = {
  KEY_NOT_SET: 0,
  CONTRACTID: 1,
  ED25519: 2,
  RSA_3072: 3,
  ECDSA_384: 4,
  THRESHOLDKEY: 5,
  KEYLIST: 6
};

/**
 * @return {proto.proto.Key.KeyCase}
 */
proto.proto.Key.prototype.getKeyCase = function() {
  return /** @type {proto.proto.Key.KeyCase} */(jspb.Message.computeOneofCase(this, proto.proto.Key.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.Key.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.Key.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.Key} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Key.toObject = function(includeInstance, msg) {
  var f, obj = {
    contractid: (f = msg.getContractid()) && proto.proto.ContractID.toObject(includeInstance, f),
    ed25519: msg.getEd25519_asB64(),
    rsa3072: msg.getRsa3072_asB64(),
    ecdsa384: msg.getEcdsa384_asB64(),
    thresholdkey: (f = msg.getThresholdkey()) && proto.proto.ThresholdKey.toObject(includeInstance, f),
    keylist: (f = msg.getKeylist()) && proto.proto.KeyList.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.Key}
 */
proto.proto.Key.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.Key;
  return proto.proto.Key.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.Key} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.Key}
 */
proto.proto.Key.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.ContractID;
      reader.readMessage(value,proto.proto.ContractID.deserializeBinaryFromReader);
      msg.setContractid(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEd25519(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRsa3072(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEcdsa384(value);
      break;
    case 5:
      var value = new proto.proto.ThresholdKey;
      reader.readMessage(value,proto.proto.ThresholdKey.deserializeBinaryFromReader);
      msg.setThresholdkey(value);
      break;
    case 6:
      var value = new proto.proto.KeyList;
      reader.readMessage(value,proto.proto.KeyList.deserializeBinaryFromReader);
      msg.setKeylist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.Key.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.Key.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.Key} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Key.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContractid();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.proto.ContractID.serializeBinaryToWriter
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getThresholdkey();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.proto.ThresholdKey.serializeBinaryToWriter
    );
  }
  f = message.getKeylist();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.proto.KeyList.serializeBinaryToWriter
    );
  }
};


/**
 * optional ContractID contractID = 1;
 * @return {?proto.proto.ContractID}
 */
proto.proto.Key.prototype.getContractid = function() {
  return /** @type{?proto.proto.ContractID} */ (
    jspb.Message.getWrapperField(this, proto.proto.ContractID, 1));
};


/** @param {?proto.proto.ContractID|undefined} value */
proto.proto.Key.prototype.setContractid = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.proto.Key.oneofGroups_[0], value);
};


proto.proto.Key.prototype.clearContractid = function() {
  this.setContractid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.Key.prototype.hasContractid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes ed25519 = 2;
 * @return {!(string|Uint8Array)}
 */
proto.proto.Key.prototype.getEd25519 = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes ed25519 = 2;
 * This is a type-conversion wrapper around `getEd25519()`
 * @return {string}
 */
proto.proto.Key.prototype.getEd25519_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEd25519()));
};


/**
 * optional bytes ed25519 = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEd25519()`
 * @return {!Uint8Array}
 */
proto.proto.Key.prototype.getEd25519_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEd25519()));
};


/** @param {!(string|Uint8Array)} value */
proto.proto.Key.prototype.setEd25519 = function(value) {
  jspb.Message.setOneofField(this, 2, proto.proto.Key.oneofGroups_[0], value);
};


proto.proto.Key.prototype.clearEd25519 = function() {
  jspb.Message.setOneofField(this, 2, proto.proto.Key.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.Key.prototype.hasEd25519 = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bytes RSA_3072 = 3;
 * @return {!(string|Uint8Array)}
 */
proto.proto.Key.prototype.getRsa3072 = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes RSA_3072 = 3;
 * This is a type-conversion wrapper around `getRsa3072()`
 * @return {string}
 */
proto.proto.Key.prototype.getRsa3072_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRsa3072()));
};


/**
 * optional bytes RSA_3072 = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRsa3072()`
 * @return {!Uint8Array}
 */
proto.proto.Key.prototype.getRsa3072_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRsa3072()));
};


/** @param {!(string|Uint8Array)} value */
proto.proto.Key.prototype.setRsa3072 = function(value) {
  jspb.Message.setOneofField(this, 3, proto.proto.Key.oneofGroups_[0], value);
};


proto.proto.Key.prototype.clearRsa3072 = function() {
  jspb.Message.setOneofField(this, 3, proto.proto.Key.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.Key.prototype.hasRsa3072 = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bytes ECDSA_384 = 4;
 * @return {!(string|Uint8Array)}
 */
proto.proto.Key.prototype.getEcdsa384 = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes ECDSA_384 = 4;
 * This is a type-conversion wrapper around `getEcdsa384()`
 * @return {string}
 */
proto.proto.Key.prototype.getEcdsa384_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEcdsa384()));
};


/**
 * optional bytes ECDSA_384 = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEcdsa384()`
 * @return {!Uint8Array}
 */
proto.proto.Key.prototype.getEcdsa384_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEcdsa384()));
};


/** @param {!(string|Uint8Array)} value */
proto.proto.Key.prototype.setEcdsa384 = function(value) {
  jspb.Message.setOneofField(this, 4, proto.proto.Key.oneofGroups_[0], value);
};


proto.proto.Key.prototype.clearEcdsa384 = function() {
  jspb.Message.setOneofField(this, 4, proto.proto.Key.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.Key.prototype.hasEcdsa384 = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional ThresholdKey thresholdKey = 5;
 * @return {?proto.proto.ThresholdKey}
 */
proto.proto.Key.prototype.getThresholdkey = function() {
  return /** @type{?proto.proto.ThresholdKey} */ (
    jspb.Message.getWrapperField(this, proto.proto.ThresholdKey, 5));
};


/** @param {?proto.proto.ThresholdKey|undefined} value */
proto.proto.Key.prototype.setThresholdkey = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.proto.Key.oneofGroups_[0], value);
};


proto.proto.Key.prototype.clearThresholdkey = function() {
  this.setThresholdkey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.Key.prototype.hasThresholdkey = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional KeyList keyList = 6;
 * @return {?proto.proto.KeyList}
 */
proto.proto.Key.prototype.getKeylist = function() {
  return /** @type{?proto.proto.KeyList} */ (
    jspb.Message.getWrapperField(this, proto.proto.KeyList, 6));
};


/** @param {?proto.proto.KeyList|undefined} value */
proto.proto.Key.prototype.setKeylist = function(value) {
  jspb.Message.setOneofWrapperField(this, 6, proto.proto.Key.oneofGroups_[0], value);
};


proto.proto.Key.prototype.clearKeylist = function() {
  this.setKeylist(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.Key.prototype.hasKeylist = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.ThresholdKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.ThresholdKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.ThresholdKey.displayName = 'proto.proto.ThresholdKey';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.ThresholdKey.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.ThresholdKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.ThresholdKey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ThresholdKey.toObject = function(includeInstance, msg) {
  var f, obj = {
    threshold: jspb.Message.getFieldWithDefault(msg, 1, 0),
    keys: (f = msg.getKeys()) && proto.proto.KeyList.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.ThresholdKey}
 */
proto.proto.ThresholdKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.ThresholdKey;
  return proto.proto.ThresholdKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.ThresholdKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.ThresholdKey}
 */
proto.proto.ThresholdKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setThreshold(value);
      break;
    case 2:
      var value = new proto.proto.KeyList;
      reader.readMessage(value,proto.proto.KeyList.deserializeBinaryFromReader);
      msg.setKeys(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.ThresholdKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.ThresholdKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.ThresholdKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ThresholdKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getThreshold();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getKeys();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.proto.KeyList.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 threshold = 1;
 * @return {number}
 */
proto.proto.ThresholdKey.prototype.getThreshold = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.ThresholdKey.prototype.setThreshold = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional KeyList keys = 2;
 * @return {?proto.proto.KeyList}
 */
proto.proto.ThresholdKey.prototype.getKeys = function() {
  return /** @type{?proto.proto.KeyList} */ (
    jspb.Message.getWrapperField(this, proto.proto.KeyList, 2));
};


/** @param {?proto.proto.KeyList|undefined} value */
proto.proto.ThresholdKey.prototype.setKeys = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.proto.ThresholdKey.prototype.clearKeys = function() {
  this.setKeys(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.ThresholdKey.prototype.hasKeys = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.KeyList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.KeyList.repeatedFields_, null);
};
goog.inherits(proto.proto.KeyList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.KeyList.displayName = 'proto.proto.KeyList';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.KeyList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.KeyList.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.KeyList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.KeyList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.KeyList.toObject = function(includeInstance, msg) {
  var f, obj = {
    keysList: jspb.Message.toObjectList(msg.getKeysList(),
    proto.proto.Key.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.KeyList}
 */
proto.proto.KeyList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.KeyList;
  return proto.proto.KeyList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.KeyList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.KeyList}
 */
proto.proto.KeyList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.Key;
      reader.readMessage(value,proto.proto.Key.deserializeBinaryFromReader);
      msg.addKeys(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.KeyList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.KeyList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.KeyList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.KeyList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKeysList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.proto.Key.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Key keys = 1;
 * @return {!Array<!proto.proto.Key>}
 */
proto.proto.KeyList.prototype.getKeysList = function() {
  return /** @type{!Array<!proto.proto.Key>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.Key, 1));
};


/** @param {!Array<!proto.proto.Key>} value */
proto.proto.KeyList.prototype.setKeysList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.proto.Key=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.Key}
 */
proto.proto.KeyList.prototype.addKeys = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.proto.Key, opt_index);
};


proto.proto.KeyList.prototype.clearKeysList = function() {
  this.setKeysList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.Signature = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.proto.Signature.oneofGroups_);
};
goog.inherits(proto.proto.Signature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.Signature.displayName = 'proto.proto.Signature';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.proto.Signature.oneofGroups_ = [[1,2,3,4,5,6]];

/**
 * @enum {number}
 */
proto.proto.Signature.SignatureCase = {
  SIGNATURE_NOT_SET: 0,
  CONTRACT: 1,
  ED25519: 2,
  RSA_3072: 3,
  ECDSA_384: 4,
  THRESHOLDSIGNATURE: 5,
  SIGNATURELIST: 6
};

/**
 * @return {proto.proto.Signature.SignatureCase}
 */
proto.proto.Signature.prototype.getSignatureCase = function() {
  return /** @type {proto.proto.Signature.SignatureCase} */(jspb.Message.computeOneofCase(this, proto.proto.Signature.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.Signature.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.Signature.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.Signature} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Signature.toObject = function(includeInstance, msg) {
  var f, obj = {
    contract: msg.getContract_asB64(),
    ed25519: msg.getEd25519_asB64(),
    rsa3072: msg.getRsa3072_asB64(),
    ecdsa384: msg.getEcdsa384_asB64(),
    thresholdsignature: (f = msg.getThresholdsignature()) && proto.proto.ThresholdSignature.toObject(includeInstance, f),
    signaturelist: (f = msg.getSignaturelist()) && proto.proto.SignatureList.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.Signature}
 */
proto.proto.Signature.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.Signature;
  return proto.proto.Signature.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.Signature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.Signature}
 */
proto.proto.Signature.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContract(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEd25519(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRsa3072(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEcdsa384(value);
      break;
    case 5:
      var value = new proto.proto.ThresholdSignature;
      reader.readMessage(value,proto.proto.ThresholdSignature.deserializeBinaryFromReader);
      msg.setThresholdsignature(value);
      break;
    case 6:
      var value = new proto.proto.SignatureList;
      reader.readMessage(value,proto.proto.SignatureList.deserializeBinaryFromReader);
      msg.setSignaturelist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.Signature.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.Signature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.Signature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Signature.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getThresholdsignature();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.proto.ThresholdSignature.serializeBinaryToWriter
    );
  }
  f = message.getSignaturelist();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.proto.SignatureList.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes contract = 1;
 * @return {!(string|Uint8Array)}
 */
proto.proto.Signature.prototype.getContract = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes contract = 1;
 * This is a type-conversion wrapper around `getContract()`
 * @return {string}
 */
proto.proto.Signature.prototype.getContract_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContract()));
};


/**
 * optional bytes contract = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContract()`
 * @return {!Uint8Array}
 */
proto.proto.Signature.prototype.getContract_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContract()));
};


/** @param {!(string|Uint8Array)} value */
proto.proto.Signature.prototype.setContract = function(value) {
  jspb.Message.setOneofField(this, 1, proto.proto.Signature.oneofGroups_[0], value);
};


proto.proto.Signature.prototype.clearContract = function() {
  jspb.Message.setOneofField(this, 1, proto.proto.Signature.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.Signature.prototype.hasContract = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes ed25519 = 2;
 * @return {!(string|Uint8Array)}
 */
proto.proto.Signature.prototype.getEd25519 = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes ed25519 = 2;
 * This is a type-conversion wrapper around `getEd25519()`
 * @return {string}
 */
proto.proto.Signature.prototype.getEd25519_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEd25519()));
};


/**
 * optional bytes ed25519 = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEd25519()`
 * @return {!Uint8Array}
 */
proto.proto.Signature.prototype.getEd25519_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEd25519()));
};


/** @param {!(string|Uint8Array)} value */
proto.proto.Signature.prototype.setEd25519 = function(value) {
  jspb.Message.setOneofField(this, 2, proto.proto.Signature.oneofGroups_[0], value);
};


proto.proto.Signature.prototype.clearEd25519 = function() {
  jspb.Message.setOneofField(this, 2, proto.proto.Signature.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.Signature.prototype.hasEd25519 = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bytes RSA_3072 = 3;
 * @return {!(string|Uint8Array)}
 */
proto.proto.Signature.prototype.getRsa3072 = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes RSA_3072 = 3;
 * This is a type-conversion wrapper around `getRsa3072()`
 * @return {string}
 */
proto.proto.Signature.prototype.getRsa3072_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRsa3072()));
};


/**
 * optional bytes RSA_3072 = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRsa3072()`
 * @return {!Uint8Array}
 */
proto.proto.Signature.prototype.getRsa3072_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRsa3072()));
};


/** @param {!(string|Uint8Array)} value */
proto.proto.Signature.prototype.setRsa3072 = function(value) {
  jspb.Message.setOneofField(this, 3, proto.proto.Signature.oneofGroups_[0], value);
};


proto.proto.Signature.prototype.clearRsa3072 = function() {
  jspb.Message.setOneofField(this, 3, proto.proto.Signature.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.Signature.prototype.hasRsa3072 = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bytes ECDSA_384 = 4;
 * @return {!(string|Uint8Array)}
 */
proto.proto.Signature.prototype.getEcdsa384 = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes ECDSA_384 = 4;
 * This is a type-conversion wrapper around `getEcdsa384()`
 * @return {string}
 */
proto.proto.Signature.prototype.getEcdsa384_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEcdsa384()));
};


/**
 * optional bytes ECDSA_384 = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEcdsa384()`
 * @return {!Uint8Array}
 */
proto.proto.Signature.prototype.getEcdsa384_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEcdsa384()));
};


/** @param {!(string|Uint8Array)} value */
proto.proto.Signature.prototype.setEcdsa384 = function(value) {
  jspb.Message.setOneofField(this, 4, proto.proto.Signature.oneofGroups_[0], value);
};


proto.proto.Signature.prototype.clearEcdsa384 = function() {
  jspb.Message.setOneofField(this, 4, proto.proto.Signature.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.Signature.prototype.hasEcdsa384 = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional ThresholdSignature thresholdSignature = 5;
 * @return {?proto.proto.ThresholdSignature}
 */
proto.proto.Signature.prototype.getThresholdsignature = function() {
  return /** @type{?proto.proto.ThresholdSignature} */ (
    jspb.Message.getWrapperField(this, proto.proto.ThresholdSignature, 5));
};


/** @param {?proto.proto.ThresholdSignature|undefined} value */
proto.proto.Signature.prototype.setThresholdsignature = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.proto.Signature.oneofGroups_[0], value);
};


proto.proto.Signature.prototype.clearThresholdsignature = function() {
  this.setThresholdsignature(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.Signature.prototype.hasThresholdsignature = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional SignatureList signatureList = 6;
 * @return {?proto.proto.SignatureList}
 */
proto.proto.Signature.prototype.getSignaturelist = function() {
  return /** @type{?proto.proto.SignatureList} */ (
    jspb.Message.getWrapperField(this, proto.proto.SignatureList, 6));
};


/** @param {?proto.proto.SignatureList|undefined} value */
proto.proto.Signature.prototype.setSignaturelist = function(value) {
  jspb.Message.setOneofWrapperField(this, 6, proto.proto.Signature.oneofGroups_[0], value);
};


proto.proto.Signature.prototype.clearSignaturelist = function() {
  this.setSignaturelist(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.Signature.prototype.hasSignaturelist = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.ThresholdSignature = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.ThresholdSignature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.ThresholdSignature.displayName = 'proto.proto.ThresholdSignature';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.ThresholdSignature.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.ThresholdSignature.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.ThresholdSignature} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ThresholdSignature.toObject = function(includeInstance, msg) {
  var f, obj = {
    sigs: (f = msg.getSigs()) && proto.proto.SignatureList.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.ThresholdSignature}
 */
proto.proto.ThresholdSignature.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.ThresholdSignature;
  return proto.proto.ThresholdSignature.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.ThresholdSignature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.ThresholdSignature}
 */
proto.proto.ThresholdSignature.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.proto.SignatureList;
      reader.readMessage(value,proto.proto.SignatureList.deserializeBinaryFromReader);
      msg.setSigs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.ThresholdSignature.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.ThresholdSignature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.ThresholdSignature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ThresholdSignature.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSigs();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.proto.SignatureList.serializeBinaryToWriter
    );
  }
};


/**
 * optional SignatureList sigs = 2;
 * @return {?proto.proto.SignatureList}
 */
proto.proto.ThresholdSignature.prototype.getSigs = function() {
  return /** @type{?proto.proto.SignatureList} */ (
    jspb.Message.getWrapperField(this, proto.proto.SignatureList, 2));
};


/** @param {?proto.proto.SignatureList|undefined} value */
proto.proto.ThresholdSignature.prototype.setSigs = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.proto.ThresholdSignature.prototype.clearSigs = function() {
  this.setSigs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.ThresholdSignature.prototype.hasSigs = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.SignatureList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.SignatureList.repeatedFields_, null);
};
goog.inherits(proto.proto.SignatureList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.SignatureList.displayName = 'proto.proto.SignatureList';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.SignatureList.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.SignatureList.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.SignatureList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.SignatureList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.SignatureList.toObject = function(includeInstance, msg) {
  var f, obj = {
    sigsList: jspb.Message.toObjectList(msg.getSigsList(),
    proto.proto.Signature.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.SignatureList}
 */
proto.proto.SignatureList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.SignatureList;
  return proto.proto.SignatureList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.SignatureList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.SignatureList}
 */
proto.proto.SignatureList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.proto.Signature;
      reader.readMessage(value,proto.proto.Signature.deserializeBinaryFromReader);
      msg.addSigs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.SignatureList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.SignatureList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.SignatureList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.SignatureList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSigsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.proto.Signature.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Signature sigs = 2;
 * @return {!Array<!proto.proto.Signature>}
 */
proto.proto.SignatureList.prototype.getSigsList = function() {
  return /** @type{!Array<!proto.proto.Signature>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.Signature, 2));
};


/** @param {!Array<!proto.proto.Signature>} value */
proto.proto.SignatureList.prototype.setSigsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.proto.Signature=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.Signature}
 */
proto.proto.SignatureList.prototype.addSigs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.proto.Signature, opt_index);
};


proto.proto.SignatureList.prototype.clearSigsList = function() {
  this.setSigsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.FeeComponents = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.FeeComponents, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.FeeComponents.displayName = 'proto.proto.FeeComponents';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.FeeComponents.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.FeeComponents.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.FeeComponents} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FeeComponents.toObject = function(includeInstance, msg) {
  var f, obj = {
    min: jspb.Message.getFieldWithDefault(msg, 1, 0),
    max: jspb.Message.getFieldWithDefault(msg, 2, 0),
    constant: jspb.Message.getFieldWithDefault(msg, 3, 0),
    bpt: jspb.Message.getFieldWithDefault(msg, 4, 0),
    vpt: jspb.Message.getFieldWithDefault(msg, 5, 0),
    rbs: jspb.Message.getFieldWithDefault(msg, 6, 0),
    sbs: jspb.Message.getFieldWithDefault(msg, 7, 0),
    gas: jspb.Message.getFieldWithDefault(msg, 8, 0),
    tv: jspb.Message.getFieldWithDefault(msg, 9, 0),
    bpr: jspb.Message.getFieldWithDefault(msg, 10, 0),
    sbpr: jspb.Message.getFieldWithDefault(msg, 11, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.FeeComponents}
 */
proto.proto.FeeComponents.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.FeeComponents;
  return proto.proto.FeeComponents.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.FeeComponents} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.FeeComponents}
 */
proto.proto.FeeComponents.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMin(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMax(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setConstant(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBpt(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setVpt(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRbs(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSbs(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setGas(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTv(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBpr(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSbpr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.FeeComponents.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.FeeComponents.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.FeeComponents} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FeeComponents.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMin();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getMax();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getConstant();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getBpt();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getVpt();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getRbs();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getSbs();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getGas();
  if (f !== 0) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = message.getTv();
  if (f !== 0) {
    writer.writeInt64(
      9,
      f
    );
  }
  f = message.getBpr();
  if (f !== 0) {
    writer.writeInt64(
      10,
      f
    );
  }
  f = message.getSbpr();
  if (f !== 0) {
    writer.writeInt64(
      11,
      f
    );
  }
};


/**
 * optional int64 min = 1;
 * @return {number}
 */
proto.proto.FeeComponents.prototype.getMin = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.FeeComponents.prototype.setMin = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 max = 2;
 * @return {number}
 */
proto.proto.FeeComponents.prototype.getMax = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.FeeComponents.prototype.setMax = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 constant = 3;
 * @return {number}
 */
proto.proto.FeeComponents.prototype.getConstant = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.proto.FeeComponents.prototype.setConstant = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 bpt = 4;
 * @return {number}
 */
proto.proto.FeeComponents.prototype.getBpt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.proto.FeeComponents.prototype.setBpt = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 vpt = 5;
 * @return {number}
 */
proto.proto.FeeComponents.prototype.getVpt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.proto.FeeComponents.prototype.setVpt = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int64 rbs = 6;
 * @return {number}
 */
proto.proto.FeeComponents.prototype.getRbs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.proto.FeeComponents.prototype.setRbs = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int64 sbs = 7;
 * @return {number}
 */
proto.proto.FeeComponents.prototype.getSbs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.proto.FeeComponents.prototype.setSbs = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int64 gas = 8;
 * @return {number}
 */
proto.proto.FeeComponents.prototype.getGas = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.proto.FeeComponents.prototype.setGas = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional int64 tv = 9;
 * @return {number}
 */
proto.proto.FeeComponents.prototype.getTv = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.proto.FeeComponents.prototype.setTv = function(value) {
  jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional int64 bpr = 10;
 * @return {number}
 */
proto.proto.FeeComponents.prototype.getBpr = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.proto.FeeComponents.prototype.setBpr = function(value) {
  jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional int64 sbpr = 11;
 * @return {number}
 */
proto.proto.FeeComponents.prototype.getSbpr = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.proto.FeeComponents.prototype.setSbpr = function(value) {
  jspb.Message.setProto3IntField(this, 11, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.TransactionFeeSchedule = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.TransactionFeeSchedule, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.TransactionFeeSchedule.displayName = 'proto.proto.TransactionFeeSchedule';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.TransactionFeeSchedule.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.TransactionFeeSchedule.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.TransactionFeeSchedule} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.TransactionFeeSchedule.toObject = function(includeInstance, msg) {
  var f, obj = {
    hederafunctionality: jspb.Message.getFieldWithDefault(msg, 1, 0),
    feedata: (f = msg.getFeedata()) && proto.proto.FeeData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.TransactionFeeSchedule}
 */
proto.proto.TransactionFeeSchedule.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.TransactionFeeSchedule;
  return proto.proto.TransactionFeeSchedule.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.TransactionFeeSchedule} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.TransactionFeeSchedule}
 */
proto.proto.TransactionFeeSchedule.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.proto.HederaFunctionality} */ (reader.readEnum());
      msg.setHederafunctionality(value);
      break;
    case 2:
      var value = new proto.proto.FeeData;
      reader.readMessage(value,proto.proto.FeeData.deserializeBinaryFromReader);
      msg.setFeedata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.TransactionFeeSchedule.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.TransactionFeeSchedule.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.TransactionFeeSchedule} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.TransactionFeeSchedule.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHederafunctionality();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getFeedata();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.proto.FeeData.serializeBinaryToWriter
    );
  }
};


/**
 * optional HederaFunctionality hederaFunctionality = 1;
 * @return {!proto.proto.HederaFunctionality}
 */
proto.proto.TransactionFeeSchedule.prototype.getHederafunctionality = function() {
  return /** @type {!proto.proto.HederaFunctionality} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.proto.HederaFunctionality} value */
proto.proto.TransactionFeeSchedule.prototype.setHederafunctionality = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional FeeData feeData = 2;
 * @return {?proto.proto.FeeData}
 */
proto.proto.TransactionFeeSchedule.prototype.getFeedata = function() {
  return /** @type{?proto.proto.FeeData} */ (
    jspb.Message.getWrapperField(this, proto.proto.FeeData, 2));
};


/** @param {?proto.proto.FeeData|undefined} value */
proto.proto.TransactionFeeSchedule.prototype.setFeedata = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.proto.TransactionFeeSchedule.prototype.clearFeedata = function() {
  this.setFeedata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.TransactionFeeSchedule.prototype.hasFeedata = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.FeeData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.FeeData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.FeeData.displayName = 'proto.proto.FeeData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.FeeData.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.FeeData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.FeeData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FeeData.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodedata: (f = msg.getNodedata()) && proto.proto.FeeComponents.toObject(includeInstance, f),
    networkdata: (f = msg.getNetworkdata()) && proto.proto.FeeComponents.toObject(includeInstance, f),
    servicedata: (f = msg.getServicedata()) && proto.proto.FeeComponents.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.FeeData}
 */
proto.proto.FeeData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.FeeData;
  return proto.proto.FeeData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.FeeData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.FeeData}
 */
proto.proto.FeeData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.FeeComponents;
      reader.readMessage(value,proto.proto.FeeComponents.deserializeBinaryFromReader);
      msg.setNodedata(value);
      break;
    case 2:
      var value = new proto.proto.FeeComponents;
      reader.readMessage(value,proto.proto.FeeComponents.deserializeBinaryFromReader);
      msg.setNetworkdata(value);
      break;
    case 3:
      var value = new proto.proto.FeeComponents;
      reader.readMessage(value,proto.proto.FeeComponents.deserializeBinaryFromReader);
      msg.setServicedata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.FeeData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.FeeData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.FeeData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FeeData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodedata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.proto.FeeComponents.serializeBinaryToWriter
    );
  }
  f = message.getNetworkdata();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.proto.FeeComponents.serializeBinaryToWriter
    );
  }
  f = message.getServicedata();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.proto.FeeComponents.serializeBinaryToWriter
    );
  }
};


/**
 * optional FeeComponents nodedata = 1;
 * @return {?proto.proto.FeeComponents}
 */
proto.proto.FeeData.prototype.getNodedata = function() {
  return /** @type{?proto.proto.FeeComponents} */ (
    jspb.Message.getWrapperField(this, proto.proto.FeeComponents, 1));
};


/** @param {?proto.proto.FeeComponents|undefined} value */
proto.proto.FeeData.prototype.setNodedata = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.proto.FeeData.prototype.clearNodedata = function() {
  this.setNodedata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.FeeData.prototype.hasNodedata = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional FeeComponents networkdata = 2;
 * @return {?proto.proto.FeeComponents}
 */
proto.proto.FeeData.prototype.getNetworkdata = function() {
  return /** @type{?proto.proto.FeeComponents} */ (
    jspb.Message.getWrapperField(this, proto.proto.FeeComponents, 2));
};


/** @param {?proto.proto.FeeComponents|undefined} value */
proto.proto.FeeData.prototype.setNetworkdata = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.proto.FeeData.prototype.clearNetworkdata = function() {
  this.setNetworkdata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.FeeData.prototype.hasNetworkdata = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional FeeComponents servicedata = 3;
 * @return {?proto.proto.FeeComponents}
 */
proto.proto.FeeData.prototype.getServicedata = function() {
  return /** @type{?proto.proto.FeeComponents} */ (
    jspb.Message.getWrapperField(this, proto.proto.FeeComponents, 3));
};


/** @param {?proto.proto.FeeComponents|undefined} value */
proto.proto.FeeData.prototype.setServicedata = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.proto.FeeData.prototype.clearServicedata = function() {
  this.setServicedata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.FeeData.prototype.hasServicedata = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.FeeSchedule = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.FeeSchedule.repeatedFields_, null);
};
goog.inherits(proto.proto.FeeSchedule, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.FeeSchedule.displayName = 'proto.proto.FeeSchedule';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.FeeSchedule.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.FeeSchedule.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.FeeSchedule.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.FeeSchedule} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FeeSchedule.toObject = function(includeInstance, msg) {
  var f, obj = {
    transactionfeescheduleList: jspb.Message.toObjectList(msg.getTransactionfeescheduleList(),
    proto.proto.TransactionFeeSchedule.toObject, includeInstance),
    feeschedulevalidityduration: (f = msg.getFeeschedulevalidityduration()) && Duration_pb.Duration.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.FeeSchedule}
 */
proto.proto.FeeSchedule.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.FeeSchedule;
  return proto.proto.FeeSchedule.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.FeeSchedule} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.FeeSchedule}
 */
proto.proto.FeeSchedule.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.TransactionFeeSchedule;
      reader.readMessage(value,proto.proto.TransactionFeeSchedule.deserializeBinaryFromReader);
      msg.addTransactionfeeschedule(value);
      break;
    case 2:
      var value = new Duration_pb.Duration;
      reader.readMessage(value,Duration_pb.Duration.deserializeBinaryFromReader);
      msg.setFeeschedulevalidityduration(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.FeeSchedule.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.FeeSchedule.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.FeeSchedule} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FeeSchedule.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransactionfeescheduleList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.proto.TransactionFeeSchedule.serializeBinaryToWriter
    );
  }
  f = message.getFeeschedulevalidityduration();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      Duration_pb.Duration.serializeBinaryToWriter
    );
  }
};


/**
 * repeated TransactionFeeSchedule transactionFeeSchedule = 1;
 * @return {!Array<!proto.proto.TransactionFeeSchedule>}
 */
proto.proto.FeeSchedule.prototype.getTransactionfeescheduleList = function() {
  return /** @type{!Array<!proto.proto.TransactionFeeSchedule>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.TransactionFeeSchedule, 1));
};


/** @param {!Array<!proto.proto.TransactionFeeSchedule>} value */
proto.proto.FeeSchedule.prototype.setTransactionfeescheduleList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.proto.TransactionFeeSchedule=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.TransactionFeeSchedule}
 */
proto.proto.FeeSchedule.prototype.addTransactionfeeschedule = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.proto.TransactionFeeSchedule, opt_index);
};


proto.proto.FeeSchedule.prototype.clearTransactionfeescheduleList = function() {
  this.setTransactionfeescheduleList([]);
};


/**
 * optional Duration feeScheduleValidityDuration = 2;
 * @return {?proto.proto.Duration}
 */
proto.proto.FeeSchedule.prototype.getFeeschedulevalidityduration = function() {
  return /** @type{?proto.proto.Duration} */ (
    jspb.Message.getWrapperField(this, Duration_pb.Duration, 2));
};


/** @param {?proto.proto.Duration|undefined} value */
proto.proto.FeeSchedule.prototype.setFeeschedulevalidityduration = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.proto.FeeSchedule.prototype.clearFeeschedulevalidityduration = function() {
  this.setFeeschedulevalidityduration(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.FeeSchedule.prototype.hasFeeschedulevalidityduration = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.NodeAddress = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.NodeAddress, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.NodeAddress.displayName = 'proto.proto.NodeAddress';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.NodeAddress.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.NodeAddress.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.NodeAddress} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.NodeAddress.toObject = function(includeInstance, msg) {
  var f, obj = {
    ipaddress: msg.getIpaddress_asB64(),
    portno: jspb.Message.getFieldWithDefault(msg, 2, 0),
    memo: msg.getMemo_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.NodeAddress}
 */
proto.proto.NodeAddress.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.NodeAddress;
  return proto.proto.NodeAddress.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.NodeAddress} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.NodeAddress}
 */
proto.proto.NodeAddress.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setIpaddress(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPortno(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMemo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.NodeAddress.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.NodeAddress.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.NodeAddress} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.NodeAddress.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIpaddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getPortno();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getMemo_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional bytes ipAddress = 1;
 * @return {!(string|Uint8Array)}
 */
proto.proto.NodeAddress.prototype.getIpaddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes ipAddress = 1;
 * This is a type-conversion wrapper around `getIpaddress()`
 * @return {string}
 */
proto.proto.NodeAddress.prototype.getIpaddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getIpaddress()));
};


/**
 * optional bytes ipAddress = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getIpaddress()`
 * @return {!Uint8Array}
 */
proto.proto.NodeAddress.prototype.getIpaddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getIpaddress()));
};


/** @param {!(string|Uint8Array)} value */
proto.proto.NodeAddress.prototype.setIpaddress = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional int32 portno = 2;
 * @return {number}
 */
proto.proto.NodeAddress.prototype.getPortno = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.NodeAddress.prototype.setPortno = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes memo = 3;
 * @return {!(string|Uint8Array)}
 */
proto.proto.NodeAddress.prototype.getMemo = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes memo = 3;
 * This is a type-conversion wrapper around `getMemo()`
 * @return {string}
 */
proto.proto.NodeAddress.prototype.getMemo_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMemo()));
};


/**
 * optional bytes memo = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMemo()`
 * @return {!Uint8Array}
 */
proto.proto.NodeAddress.prototype.getMemo_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMemo()));
};


/** @param {!(string|Uint8Array)} value */
proto.proto.NodeAddress.prototype.setMemo = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.NodeAddressBook = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.NodeAddressBook.repeatedFields_, null);
};
goog.inherits(proto.proto.NodeAddressBook, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.NodeAddressBook.displayName = 'proto.proto.NodeAddressBook';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.NodeAddressBook.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.NodeAddressBook.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.NodeAddressBook.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.NodeAddressBook} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.NodeAddressBook.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodeaddressList: jspb.Message.toObjectList(msg.getNodeaddressList(),
    proto.proto.NodeAddress.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.NodeAddressBook}
 */
proto.proto.NodeAddressBook.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.NodeAddressBook;
  return proto.proto.NodeAddressBook.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.NodeAddressBook} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.NodeAddressBook}
 */
proto.proto.NodeAddressBook.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.NodeAddress;
      reader.readMessage(value,proto.proto.NodeAddress.deserializeBinaryFromReader);
      msg.addNodeaddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.NodeAddressBook.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.NodeAddressBook.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.NodeAddressBook} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.NodeAddressBook.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodeaddressList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.proto.NodeAddress.serializeBinaryToWriter
    );
  }
};


/**
 * repeated NodeAddress nodeAddress = 1;
 * @return {!Array<!proto.proto.NodeAddress>}
 */
proto.proto.NodeAddressBook.prototype.getNodeaddressList = function() {
  return /** @type{!Array<!proto.proto.NodeAddress>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.NodeAddress, 1));
};


/** @param {!Array<!proto.proto.NodeAddress>} value */
proto.proto.NodeAddressBook.prototype.setNodeaddressList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.proto.NodeAddress=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.NodeAddress}
 */
proto.proto.NodeAddressBook.prototype.addNodeaddress = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.proto.NodeAddress, opt_index);
};


proto.proto.NodeAddressBook.prototype.clearNodeaddressList = function() {
  this.setNodeaddressList([]);
};


/**
 * @enum {number}
 */
proto.proto.HederaFunctionality = {
  CRYPTOCREATE: 0,
  CRYPTOTRANSFER: 1,
  CRYPTOUPDATE: 2,
  CRYPTODELETE: 3,
  CRYPTOADDCLAIM: 4,
  CRYPTODELETCLAIM: 5,
  CONTRACTCALL: 6,
  CONTRACTCREATE: 7,
  CONTRACTUPDATE: 8,
  FILECREATE: 9,
  FILEAPPEND: 10,
  FILEUPDATE: 11,
  FILEDELETE: 12,
  CRYPTOGETACCOUNTBALANCE: 13,
  CRYPTOGETACCOUNTRECORDS: 14,
  CRYPTOGETINFO: 15,
  CONTRACTCALLLOCAL: 16,
  CONTRACTGETINFO: 17,
  CONTRACTGETBYTECODE: 18,
  GETBYSOLIDITYID: 19,
  GETBYKEY: 20,
  CRYPTOGETCLAIM: 21,
  CRYPTOGETSTAKERS: 22,
  FILEGETCONTENTS: 23,
  FILEGETINFO: 24,
  TRANSACTIONGETRECORD: 25
};

goog.object.extend(exports, proto.proto);
