/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var Timestamp_pb = require('./Timestamp_pb.js');
var BasicTypes_pb = require('./BasicTypes_pb.js');
var TransactionReceipt_pb = require('./TransactionReceipt_pb.js');
var CryptoTransfer_pb = require('./CryptoTransfer_pb.js');
var ContractCallLocal_pb = require('./ContractCallLocal_pb.js');
goog.exportSymbol('proto.proto.TransactionRecord', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.TransactionRecord = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.proto.TransactionRecord.oneofGroups_);
};
goog.inherits(proto.proto.TransactionRecord, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.TransactionRecord.displayName = 'proto.proto.TransactionRecord';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.proto.TransactionRecord.oneofGroups_ = [[7,8,9]];

/**
 * @enum {number}
 */
proto.proto.TransactionRecord.BodyCase = {
  BODY_NOT_SET: 0,
  CONTRACTCALLRESULT: 7,
  CONTRACTCREATERESULT: 8,
  TRANSFERLIST: 9
};

/**
 * @return {proto.proto.TransactionRecord.BodyCase}
 */
proto.proto.TransactionRecord.prototype.getBodyCase = function() {
  return /** @type {proto.proto.TransactionRecord.BodyCase} */(jspb.Message.computeOneofCase(this, proto.proto.TransactionRecord.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.TransactionRecord.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.TransactionRecord.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.TransactionRecord} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.TransactionRecord.toObject = function(includeInstance, msg) {
  var f, obj = {
    receipt: (f = msg.getReceipt()) && TransactionReceipt_pb.TransactionReceipt.toObject(includeInstance, f),
    transactionhash: msg.getTransactionhash_asB64(),
    consensustimestamp: (f = msg.getConsensustimestamp()) && Timestamp_pb.Timestamp.toObject(includeInstance, f),
    transactionid: (f = msg.getTransactionid()) && BasicTypes_pb.TransactionID.toObject(includeInstance, f),
    memo: jspb.Message.getFieldWithDefault(msg, 5, ""),
    transactionfee: jspb.Message.getFieldWithDefault(msg, 6, 0),
    contractcallresult: (f = msg.getContractcallresult()) && ContractCallLocal_pb.ContractFunctionResult.toObject(includeInstance, f),
    contractcreateresult: (f = msg.getContractcreateresult()) && ContractCallLocal_pb.ContractFunctionResult.toObject(includeInstance, f),
    transferlist: (f = msg.getTransferlist()) && CryptoTransfer_pb.TransferList.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.TransactionRecord}
 */
proto.proto.TransactionRecord.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.TransactionRecord;
  return proto.proto.TransactionRecord.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.TransactionRecord} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.TransactionRecord}
 */
proto.proto.TransactionRecord.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new TransactionReceipt_pb.TransactionReceipt;
      reader.readMessage(value,TransactionReceipt_pb.TransactionReceipt.deserializeBinaryFromReader);
      msg.setReceipt(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTransactionhash(value);
      break;
    case 3:
      var value = new Timestamp_pb.Timestamp;
      reader.readMessage(value,Timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setConsensustimestamp(value);
      break;
    case 4:
      var value = new BasicTypes_pb.TransactionID;
      reader.readMessage(value,BasicTypes_pb.TransactionID.deserializeBinaryFromReader);
      msg.setTransactionid(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setMemo(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTransactionfee(value);
      break;
    case 7:
      var value = new ContractCallLocal_pb.ContractFunctionResult;
      reader.readMessage(value,ContractCallLocal_pb.ContractFunctionResult.deserializeBinaryFromReader);
      msg.setContractcallresult(value);
      break;
    case 8:
      var value = new ContractCallLocal_pb.ContractFunctionResult;
      reader.readMessage(value,ContractCallLocal_pb.ContractFunctionResult.deserializeBinaryFromReader);
      msg.setContractcreateresult(value);
      break;
    case 9:
      var value = new CryptoTransfer_pb.TransferList;
      reader.readMessage(value,CryptoTransfer_pb.TransferList.deserializeBinaryFromReader);
      msg.setTransferlist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.TransactionRecord.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.TransactionRecord.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.TransactionRecord} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.TransactionRecord.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReceipt();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      TransactionReceipt_pb.TransactionReceipt.serializeBinaryToWriter
    );
  }
  f = message.getTransactionhash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getConsensustimestamp();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      Timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getTransactionid();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      BasicTypes_pb.TransactionID.serializeBinaryToWriter
    );
  }
  f = message.getMemo();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getTransactionfee();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getContractcallresult();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      ContractCallLocal_pb.ContractFunctionResult.serializeBinaryToWriter
    );
  }
  f = message.getContractcreateresult();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      ContractCallLocal_pb.ContractFunctionResult.serializeBinaryToWriter
    );
  }
  f = message.getTransferlist();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      CryptoTransfer_pb.TransferList.serializeBinaryToWriter
    );
  }
};


/**
 * optional TransactionReceipt receipt = 1;
 * @return {?proto.proto.TransactionReceipt}
 */
proto.proto.TransactionRecord.prototype.getReceipt = function() {
  return /** @type{?proto.proto.TransactionReceipt} */ (
    jspb.Message.getWrapperField(this, TransactionReceipt_pb.TransactionReceipt, 1));
};


/** @param {?proto.proto.TransactionReceipt|undefined} value */
proto.proto.TransactionRecord.prototype.setReceipt = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.proto.TransactionRecord.prototype.clearReceipt = function() {
  this.setReceipt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.TransactionRecord.prototype.hasReceipt = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes transactionHash = 2;
 * @return {!(string|Uint8Array)}
 */
proto.proto.TransactionRecord.prototype.getTransactionhash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes transactionHash = 2;
 * This is a type-conversion wrapper around `getTransactionhash()`
 * @return {string}
 */
proto.proto.TransactionRecord.prototype.getTransactionhash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTransactionhash()));
};


/**
 * optional bytes transactionHash = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTransactionhash()`
 * @return {!Uint8Array}
 */
proto.proto.TransactionRecord.prototype.getTransactionhash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTransactionhash()));
};


/** @param {!(string|Uint8Array)} value */
proto.proto.TransactionRecord.prototype.setTransactionhash = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional Timestamp consensusTimestamp = 3;
 * @return {?proto.proto.Timestamp}
 */
proto.proto.TransactionRecord.prototype.getConsensustimestamp = function() {
  return /** @type{?proto.proto.Timestamp} */ (
    jspb.Message.getWrapperField(this, Timestamp_pb.Timestamp, 3));
};


/** @param {?proto.proto.Timestamp|undefined} value */
proto.proto.TransactionRecord.prototype.setConsensustimestamp = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.proto.TransactionRecord.prototype.clearConsensustimestamp = function() {
  this.setConsensustimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.TransactionRecord.prototype.hasConsensustimestamp = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional TransactionID transactionID = 4;
 * @return {?proto.proto.TransactionID}
 */
proto.proto.TransactionRecord.prototype.getTransactionid = function() {
  return /** @type{?proto.proto.TransactionID} */ (
    jspb.Message.getWrapperField(this, BasicTypes_pb.TransactionID, 4));
};


/** @param {?proto.proto.TransactionID|undefined} value */
proto.proto.TransactionRecord.prototype.setTransactionid = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.proto.TransactionRecord.prototype.clearTransactionid = function() {
  this.setTransactionid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.TransactionRecord.prototype.hasTransactionid = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string memo = 5;
 * @return {string}
 */
proto.proto.TransactionRecord.prototype.getMemo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.proto.TransactionRecord.prototype.setMemo = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional uint64 transactionFee = 6;
 * @return {number}
 */
proto.proto.TransactionRecord.prototype.getTransactionfee = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.proto.TransactionRecord.prototype.setTransactionfee = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional ContractFunctionResult contractCallResult = 7;
 * @return {?proto.proto.ContractFunctionResult}
 */
proto.proto.TransactionRecord.prototype.getContractcallresult = function() {
  return /** @type{?proto.proto.ContractFunctionResult} */ (
    jspb.Message.getWrapperField(this, ContractCallLocal_pb.ContractFunctionResult, 7));
};


/** @param {?proto.proto.ContractFunctionResult|undefined} value */
proto.proto.TransactionRecord.prototype.setContractcallresult = function(value) {
  jspb.Message.setOneofWrapperField(this, 7, proto.proto.TransactionRecord.oneofGroups_[0], value);
};


proto.proto.TransactionRecord.prototype.clearContractcallresult = function() {
  this.setContractcallresult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.TransactionRecord.prototype.hasContractcallresult = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional ContractFunctionResult contractCreateResult = 8;
 * @return {?proto.proto.ContractFunctionResult}
 */
proto.proto.TransactionRecord.prototype.getContractcreateresult = function() {
  return /** @type{?proto.proto.ContractFunctionResult} */ (
    jspb.Message.getWrapperField(this, ContractCallLocal_pb.ContractFunctionResult, 8));
};


/** @param {?proto.proto.ContractFunctionResult|undefined} value */
proto.proto.TransactionRecord.prototype.setContractcreateresult = function(value) {
  jspb.Message.setOneofWrapperField(this, 8, proto.proto.TransactionRecord.oneofGroups_[0], value);
};


proto.proto.TransactionRecord.prototype.clearContractcreateresult = function() {
  this.setContractcreateresult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.TransactionRecord.prototype.hasContractcreateresult = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional TransferList transferList = 9;
 * @return {?proto.proto.TransferList}
 */
proto.proto.TransactionRecord.prototype.getTransferlist = function() {
  return /** @type{?proto.proto.TransferList} */ (
    jspb.Message.getWrapperField(this, CryptoTransfer_pb.TransferList, 9));
};


/** @param {?proto.proto.TransferList|undefined} value */
proto.proto.TransactionRecord.prototype.setTransferlist = function(value) {
  jspb.Message.setOneofWrapperField(this, 9, proto.proto.TransactionRecord.oneofGroups_[0], value);
};


proto.proto.TransactionRecord.prototype.clearTransferlist = function() {
  this.setTransferlist(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.TransactionRecord.prototype.hasTransferlist = function() {
  return jspb.Message.getField(this, 9) != null;
};


goog.object.extend(exports, proto.proto);
