// Code generated by protoc-gen-go. DO NOT EDIT.
// source: QueryHeader.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The client uses the ResponseType to request that the node send it just the answer, or both the answer and a state proof. It can also ask for just the cost for getting the answer or both. If the payment in the query fails the precheck, then the response may have some fields blank. The state proof is only available for some types of information. It is available for a Record, but not a receipt. It is available for the information in each kind of *GetInfo request.
type ResponseType int32

const (
	ResponseType_ANSWER_ONLY             ResponseType = 0
	ResponseType_ANSWER_STATE_PROOF      ResponseType = 1
	ResponseType_COST_ANSWER             ResponseType = 2
	ResponseType_COST_ANSWER_STATE_PROOF ResponseType = 3
)

var ResponseType_name = map[int32]string{
	0: "ANSWER_ONLY",
	1: "ANSWER_STATE_PROOF",
	2: "COST_ANSWER",
	3: "COST_ANSWER_STATE_PROOF",
}

var ResponseType_value = map[string]int32{
	"ANSWER_ONLY":             0,
	"ANSWER_STATE_PROOF":      1,
	"COST_ANSWER":             2,
	"COST_ANSWER_STATE_PROOF": 3,
}

func (x ResponseType) String() string {
	return proto.EnumName(ResponseType_name, int32(x))
}

func (ResponseType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bef2278189e4f455, []int{0}
}

// Each query from the client to the node will contain the QueryHeader, which gives the requested response type, and includes a payment for the response. It will sometimes leave payment blank: it is blank for TransactionGetReceiptQuery. It can also be left blank when the responseType is costAnswer or costAnswerStateProof. But it needs to be filled in for all other cases. The idea is that an answer that is only a few bytes (or that was paid for earlier) can be given for free. But if the answer is something that requires many bytes or much computation (like a state proof), then it should be paid for.
type QueryHeader struct {
	Payment              *Transaction `protobuf:"bytes,1,opt,name=payment,proto3" json:"payment,omitempty"`
	ResponseType         ResponseType `protobuf:"varint,2,opt,name=responseType,proto3,enum=proto.ResponseType" json:"responseType,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *QueryHeader) Reset()         { *m = QueryHeader{} }
func (m *QueryHeader) String() string { return proto.CompactTextString(m) }
func (*QueryHeader) ProtoMessage()    {}
func (*QueryHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_bef2278189e4f455, []int{0}
}

func (m *QueryHeader) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryHeader.Unmarshal(m, b)
}
func (m *QueryHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryHeader.Marshal(b, m, deterministic)
}
func (m *QueryHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryHeader.Merge(m, src)
}
func (m *QueryHeader) XXX_Size() int {
	return xxx_messageInfo_QueryHeader.Size(m)
}
func (m *QueryHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryHeader.DiscardUnknown(m)
}

var xxx_messageInfo_QueryHeader proto.InternalMessageInfo

func (m *QueryHeader) GetPayment() *Transaction {
	if m != nil {
		return m.Payment
	}
	return nil
}

func (m *QueryHeader) GetResponseType() ResponseType {
	if m != nil {
		return m.ResponseType
	}
	return ResponseType_ANSWER_ONLY
}

func init() {
	proto.RegisterEnum("proto.ResponseType", ResponseType_name, ResponseType_value)
	proto.RegisterType((*QueryHeader)(nil), "proto.QueryHeader")
}

func init() { proto.RegisterFile("QueryHeader.proto", fileDescriptor_bef2278189e4f455) }

var fileDescriptor_bef2278189e4f455 = []byte{
	// 229 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x0c, 0x2c, 0x4d, 0x2d,
	0xaa, 0xf4, 0x48, 0x4d, 0x4c, 0x49, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05,
	0x53, 0x52, 0x82, 0x21, 0x45, 0x89, 0x79, 0xc5, 0x89, 0xc9, 0x25, 0x99, 0xf9, 0x79, 0x10, 0x19,
	0xa5, 0x12, 0x2e, 0x6e, 0x24, 0xe5, 0x42, 0x3a, 0x5c, 0xec, 0x05, 0x89, 0x95, 0xb9, 0xa9, 0x79,
	0x25, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0xdc, 0x46, 0x42, 0x10, 0x75, 0x7a, 0x48, 0x3a, 0x83, 0x60,
	0x4a, 0x84, 0xcc, 0xb9, 0x78, 0x8a, 0x52, 0x8b, 0x0b, 0xf2, 0xf3, 0x8a, 0x53, 0x43, 0x2a, 0x0b,
	0x52, 0x25, 0x98, 0x14, 0x18, 0x35, 0xf8, 0x8c, 0x84, 0xa1, 0x5a, 0x82, 0x90, 0xa4, 0x82, 0x50,
	0x14, 0x6a, 0xa5, 0x72, 0xf1, 0x20, 0xcb, 0x0a, 0xf1, 0x73, 0x71, 0x3b, 0xfa, 0x05, 0x87, 0xbb,
	0x06, 0xc5, 0xfb, 0xfb, 0xf9, 0x44, 0x0a, 0x30, 0x08, 0x89, 0x71, 0x09, 0x41, 0x05, 0x82, 0x43,
	0x1c, 0x43, 0x5c, 0xe3, 0x03, 0x82, 0xfc, 0xfd, 0xdd, 0x04, 0x18, 0x41, 0x0a, 0x9d, 0xfd, 0x83,
	0x43, 0xe2, 0x21, 0x92, 0x02, 0x4c, 0x42, 0xd2, 0x5c, 0xe2, 0x48, 0x02, 0x28, 0xaa, 0x99, 0x9d,
	0xd4, 0xb8, 0x94, 0x92, 0xf3, 0x73, 0xf5, 0x32, 0x52, 0x53, 0x52, 0x8b, 0x12, 0x33, 0x12, 0x8b,
	0x33, 0xd2, 0x8b, 0x12, 0x0b, 0x32, 0xf4, 0x12, 0x0b, 0x32, 0xa1, 0x4e, 0xcc, 0x4a, 0x2c, 0x4b,
	0x0c, 0x60, 0x4c, 0x62, 0x03, 0xf3, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x0d, 0x43, 0xff,
	0x05, 0x3a, 0x01, 0x00, 0x00,
}
