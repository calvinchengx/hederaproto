// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ContractCreate.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Start a new smart contract instance. After the instance is created, the ContractID for it is in the receipt, or can be retrieved with a GetByKey query, or by asking for a Record of the transaction to be created, and retrieving that. The instance will run the bytecode stored in the given file, referenced either by FileID or by the transaction ID of the transaction that created the file. The constructor will be executed using the given amount of gas, and any unspent gas will be refunded to the paying account. Constructor inputs come from the given constructorParameters.
//
// The instance will exist for autoRenewPeriod seconds. When that is reached, it will renew itself for another autoRenewPeriod seconds by charging its associated cryptocurrency account (which it creates here). If it has insufficient cryptocurrency to extend that long, it will extend as long as it can. If its balance is zero, the instance will be deleted.
//
// A smart contract instance normally enforces rules, so "the code is law". For example, an ERC-20 contract prevents a transfer from being undone without a signature by the recipient of the transfer. This is always enforced if the contract instance was created with the adminKeys being null. But for some uses, it might be desirable to create something like an ERC-20 contract that has a specific group of trusted individuals who can act as a "supreme court" with the ability to override the normal operation, when a sufficient number of them agree to do so. If adminKeys is not null, then they can sign a transaction that can change the state of the smart contract in arbitrary ways, such as to reverse a transaction that violates some standard of behavior that is not covered by the code itself. The admin keys can also be used to change the autoRenewPeriod, and change the adminKeys field itself. The API currently does not implement this ability. But it does allow the adminKeys field to be set and queried, and will in the future implement such admin abilities for any instance that has a non-null adminKeys.
//
// If this constructor stores information, it is charged gas to store it. There is a fee in hbars to maintain that storage until the expiration time, and that fee is added as part of the transaction fee.
//
// An entity (account, file, or smart contract instance) must be created in a particular realm. If the realmID is left null, then a new realm will be created with the given admin key. If a new realm has a null adminKey, then anyone can create/modify/delete entities in that realm. But if an admin key is given, then any transaction to create/modify/delete an entity in that realm must be signed by that key, though anyone can still call functions on smart contract instances that exist in that realm. A realm ceases to exist when everything within it has expired and no longer exists.
//
// The current API ignores shardID, realmID, and newRealmAdminKey, and creates everything in shard 0 and realm 0, with a null key. Future versions of the API will support multiple realms and multiple shards.
type ContractCreateTransactionBody struct {
	FileID                *FileID    `protobuf:"bytes,1,opt,name=fileID,proto3" json:"fileID,omitempty"`
	AdminKey              *Key       `protobuf:"bytes,3,opt,name=adminKey,proto3" json:"adminKey,omitempty"`
	Gas                   int64      `protobuf:"varint,4,opt,name=gas,proto3" json:"gas,omitempty"`
	InitialBalance        int64      `protobuf:"varint,5,opt,name=initialBalance,proto3" json:"initialBalance,omitempty"`
	ProxyAccountID        *AccountID `protobuf:"bytes,6,opt,name=proxyAccountID,proto3" json:"proxyAccountID,omitempty"`
	ProxyFraction         int32      `protobuf:"varint,7,opt,name=proxyFraction,proto3" json:"proxyFraction,omitempty"`
	AutoRenewPeriod       *Duration  `protobuf:"bytes,8,opt,name=autoRenewPeriod,proto3" json:"autoRenewPeriod,omitempty"`
	ConstructorParameters []byte     `protobuf:"bytes,9,opt,name=constructorParameters,proto3" json:"constructorParameters,omitempty"`
	ShardID               *ShardID   `protobuf:"bytes,10,opt,name=shardID,proto3" json:"shardID,omitempty"`
	RealmID               *RealmID   `protobuf:"bytes,11,opt,name=realmID,proto3" json:"realmID,omitempty"`
	NewRealmAdminKey      *Key       `protobuf:"bytes,12,opt,name=newRealmAdminKey,proto3" json:"newRealmAdminKey,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}   `json:"-"`
	XXX_unrecognized      []byte     `json:"-"`
	XXX_sizecache         int32      `json:"-"`
}

func (m *ContractCreateTransactionBody) Reset()         { *m = ContractCreateTransactionBody{} }
func (m *ContractCreateTransactionBody) String() string { return proto.CompactTextString(m) }
func (*ContractCreateTransactionBody) ProtoMessage()    {}
func (*ContractCreateTransactionBody) Descriptor() ([]byte, []int) {
	return fileDescriptor_07d90cd594b2010a, []int{0}
}

func (m *ContractCreateTransactionBody) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ContractCreateTransactionBody.Unmarshal(m, b)
}
func (m *ContractCreateTransactionBody) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ContractCreateTransactionBody.Marshal(b, m, deterministic)
}
func (m *ContractCreateTransactionBody) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContractCreateTransactionBody.Merge(m, src)
}
func (m *ContractCreateTransactionBody) XXX_Size() int {
	return xxx_messageInfo_ContractCreateTransactionBody.Size(m)
}
func (m *ContractCreateTransactionBody) XXX_DiscardUnknown() {
	xxx_messageInfo_ContractCreateTransactionBody.DiscardUnknown(m)
}

var xxx_messageInfo_ContractCreateTransactionBody proto.InternalMessageInfo

func (m *ContractCreateTransactionBody) GetFileID() *FileID {
	if m != nil {
		return m.FileID
	}
	return nil
}

func (m *ContractCreateTransactionBody) GetAdminKey() *Key {
	if m != nil {
		return m.AdminKey
	}
	return nil
}

func (m *ContractCreateTransactionBody) GetGas() int64 {
	if m != nil {
		return m.Gas
	}
	return 0
}

func (m *ContractCreateTransactionBody) GetInitialBalance() int64 {
	if m != nil {
		return m.InitialBalance
	}
	return 0
}

func (m *ContractCreateTransactionBody) GetProxyAccountID() *AccountID {
	if m != nil {
		return m.ProxyAccountID
	}
	return nil
}

func (m *ContractCreateTransactionBody) GetProxyFraction() int32 {
	if m != nil {
		return m.ProxyFraction
	}
	return 0
}

func (m *ContractCreateTransactionBody) GetAutoRenewPeriod() *Duration {
	if m != nil {
		return m.AutoRenewPeriod
	}
	return nil
}

func (m *ContractCreateTransactionBody) GetConstructorParameters() []byte {
	if m != nil {
		return m.ConstructorParameters
	}
	return nil
}

func (m *ContractCreateTransactionBody) GetShardID() *ShardID {
	if m != nil {
		return m.ShardID
	}
	return nil
}

func (m *ContractCreateTransactionBody) GetRealmID() *RealmID {
	if m != nil {
		return m.RealmID
	}
	return nil
}

func (m *ContractCreateTransactionBody) GetNewRealmAdminKey() *Key {
	if m != nil {
		return m.NewRealmAdminKey
	}
	return nil
}

func init() {
	proto.RegisterType((*ContractCreateTransactionBody)(nil), "proto.ContractCreateTransactionBody")
}

func init() { proto.RegisterFile("ContractCreate.proto", fileDescriptor_07d90cd594b2010a) }

var fileDescriptor_07d90cd594b2010a = []byte{
	// 367 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0xd1, 0x6a, 0xdb, 0x30,
	0x14, 0x86, 0x31, 0x69, 0xd2, 0x4e, 0x6d, 0x53, 0x23, 0x36, 0x10, 0x85, 0x81, 0x29, 0x5b, 0xf0,
	0x95, 0x2f, 0xb6, 0x31, 0xb6, 0xcb, 0xba, 0xa6, 0x60, 0x7a, 0x13, 0xb4, 0xbe, 0xc0, 0x99, 0x7c,
	0x56, 0x6b, 0xd8, 0x92, 0x39, 0x92, 0xd7, 0xf9, 0x01, 0xf6, 0xde, 0x23, 0xb2, 0x5d, 0x48, 0xd2,
	0x2b, 0x5b, 0xdf, 0xff, 0x1d, 0xff, 0x58, 0x87, 0xbd, 0xbd, 0xb3, 0xc6, 0x13, 0x28, 0x7f, 0x47,
	0x08, 0x1e, 0xb3, 0x8e, 0xac, 0xb7, 0x7c, 0x19, 0x1e, 0xd7, 0x71, 0x0e, 0x4e, 0xab, 0xc7, 0xa1,
	0x43, 0x37, 0x06, 0xd7, 0xeb, 0xa2, 0x27, 0xf0, 0xda, 0x9a, 0xf1, 0x7c, 0xf3, 0xef, 0x84, 0xbd,
	0xdf, 0xff, 0xc2, 0x23, 0x81, 0x71, 0xa0, 0x76, 0x4e, 0x6e, 0xab, 0x81, 0x7f, 0x64, 0xab, 0x5f,
	0xba, 0xc1, 0xb2, 0x10, 0x51, 0x12, 0xa5, 0xe7, 0x9f, 0x2e, 0xc7, 0xc9, 0xec, 0x3e, 0x40, 0x39,
	0x85, 0x7c, 0xc3, 0xce, 0xa0, 0x6a, 0xb5, 0x79, 0xc0, 0x41, 0x2c, 0x82, 0xc8, 0x26, 0xf1, 0x01,
	0x07, 0xf9, 0x92, 0xf1, 0x98, 0x2d, 0x9e, 0xc0, 0x89, 0x93, 0x24, 0x4a, 0x17, 0x72, 0xf7, 0xca,
	0x37, 0x6c, 0xad, 0x8d, 0xf6, 0x1a, 0x9a, 0x1c, 0x1a, 0x30, 0x0a, 0xc5, 0x32, 0x84, 0x07, 0x94,
	0x7f, 0x63, 0xeb, 0x8e, 0xec, 0xdf, 0xe1, 0x56, 0x29, 0xdb, 0x1b, 0x5f, 0x16, 0x62, 0x15, 0x7a,
	0xe2, 0xa9, 0xe7, 0x85, 0xcb, 0x03, 0x8f, 0x7f, 0x60, 0x97, 0x81, 0xdc, 0xd3, 0xf8, 0x5f, 0xe2,
	0x34, 0x89, 0xd2, 0xa5, 0xdc, 0x87, 0xfc, 0x3b, 0xbb, 0x82, 0xde, 0x5b, 0x89, 0x06, 0x9f, 0xb7,
	0x48, 0xda, 0x56, 0xe2, 0x2c, 0x14, 0x5c, 0x4d, 0x05, 0xf3, 0xd5, 0xc9, 0x43, 0x8f, 0x7f, 0x61,
	0xef, 0x94, 0x35, 0xce, 0x53, 0xaf, 0xbc, 0xa5, 0x2d, 0x10, 0xb4, 0xe8, 0x91, 0x9c, 0x78, 0x93,
	0x44, 0xe9, 0x85, 0x7c, 0x3d, 0xe4, 0x29, 0x3b, 0x75, 0x35, 0x50, 0x55, 0x16, 0x82, 0x85, 0xa2,
	0xf5, 0x54, 0xf4, 0x63, 0xa4, 0x72, 0x8e, 0x77, 0x26, 0x21, 0x34, 0x6d, 0x59, 0x88, 0xf3, 0x3d,
	0x53, 0x8e, 0x54, 0xce, 0x31, 0xff, 0xca, 0x62, 0x83, 0xcf, 0x01, 0xdf, 0xce, 0xeb, 0xb8, 0x38,
	0x5a, 0xc7, 0x91, 0x93, 0x6f, 0xd8, 0x8d, 0xb2, 0x6d, 0x56, 0x63, 0x85, 0x04, 0x35, 0xb8, 0xfa,
	0x89, 0xa0, 0xab, 0x33, 0xe8, 0xf4, 0x34, 0xf6, 0x1b, 0xfe, 0xc0, 0x36, 0xfa, 0xb9, 0x0a, 0xa7,
	0xcf, 0xff, 0x03, 0x00, 0x00, 0xff, 0xff, 0xf8, 0x0a, 0xdf, 0x98, 0x77, 0x02, 0x00, 0x00,
}
