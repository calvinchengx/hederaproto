// Code generated by protoc-gen-go. DO NOT EDIT.
// source: Transaction.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// A single transaction. All transaction types are possible here.
type TransactionBody struct {
	TransactionID            *TransactionID `protobuf:"bytes,1,opt,name=transactionID,proto3" json:"transactionID,omitempty"`
	NodeAccountID            *AccountID     `protobuf:"bytes,2,opt,name=nodeAccountID,proto3" json:"nodeAccountID,omitempty"`
	TransactionFee           uint64         `protobuf:"varint,3,opt,name=transactionFee,proto3" json:"transactionFee,omitempty"`
	TransactionValidDuration *Duration      `protobuf:"bytes,4,opt,name=transactionValidDuration,proto3" json:"transactionValidDuration,omitempty"`
	GenerateRecord           bool           `protobuf:"varint,5,opt,name=generateRecord,proto3" json:"generateRecord,omitempty"`
	Memo                     string         `protobuf:"bytes,6,opt,name=memo,proto3" json:"memo,omitempty"`
	// Types that are valid to be assigned to Data:
	//	*TransactionBody_AdminDelete
	//	*TransactionBody_AdminUndelete
	//	*TransactionBody_ContractCall
	//	*TransactionBody_ContractCreateInstance
	//	*TransactionBody_ContractUpdateInstance
	//	*TransactionBody_CryptoAddClaim
	//	*TransactionBody_CryptoCreateAccount
	//	*TransactionBody_CryptoDelete
	//	*TransactionBody_CryptoDeleteClaim
	//	*TransactionBody_CryptoTransfer
	//	*TransactionBody_CryptoUpdateAccount
	//	*TransactionBody_FileAppend
	//	*TransactionBody_FileCreate
	//	*TransactionBody_FileDelete
	//	*TransactionBody_FileUpdate
	Data                 isTransactionBody_Data `protobuf_oneof:"data"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *TransactionBody) Reset()         { *m = TransactionBody{} }
func (m *TransactionBody) String() string { return proto.CompactTextString(m) }
func (*TransactionBody) ProtoMessage()    {}
func (*TransactionBody) Descriptor() ([]byte, []int) {
	return fileDescriptor_80613087cbbd34fc, []int{0}
}

func (m *TransactionBody) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransactionBody.Unmarshal(m, b)
}
func (m *TransactionBody) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransactionBody.Marshal(b, m, deterministic)
}
func (m *TransactionBody) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionBody.Merge(m, src)
}
func (m *TransactionBody) XXX_Size() int {
	return xxx_messageInfo_TransactionBody.Size(m)
}
func (m *TransactionBody) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionBody.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionBody proto.InternalMessageInfo

func (m *TransactionBody) GetTransactionID() *TransactionID {
	if m != nil {
		return m.TransactionID
	}
	return nil
}

func (m *TransactionBody) GetNodeAccountID() *AccountID {
	if m != nil {
		return m.NodeAccountID
	}
	return nil
}

func (m *TransactionBody) GetTransactionFee() uint64 {
	if m != nil {
		return m.TransactionFee
	}
	return 0
}

func (m *TransactionBody) GetTransactionValidDuration() *Duration {
	if m != nil {
		return m.TransactionValidDuration
	}
	return nil
}

func (m *TransactionBody) GetGenerateRecord() bool {
	if m != nil {
		return m.GenerateRecord
	}
	return false
}

func (m *TransactionBody) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

type isTransactionBody_Data interface {
	isTransactionBody_Data()
}

type TransactionBody_AdminDelete struct {
	AdminDelete *AdminDeleteTransactionBody `protobuf:"bytes,20,opt,name=adminDelete,proto3,oneof"`
}

type TransactionBody_AdminUndelete struct {
	AdminUndelete *AdminUndeleteTransactionBody `protobuf:"bytes,21,opt,name=adminUndelete,proto3,oneof"`
}

type TransactionBody_ContractCall struct {
	ContractCall *ContractCallTransactionBody `protobuf:"bytes,7,opt,name=contractCall,proto3,oneof"`
}

type TransactionBody_ContractCreateInstance struct {
	ContractCreateInstance *ContractCreateTransactionBody `protobuf:"bytes,8,opt,name=contractCreateInstance,proto3,oneof"`
}

type TransactionBody_ContractUpdateInstance struct {
	ContractUpdateInstance *ContractUpdateTransactionBody `protobuf:"bytes,9,opt,name=contractUpdateInstance,proto3,oneof"`
}

type TransactionBody_CryptoAddClaim struct {
	CryptoAddClaim *CryptoAddClaimTransactionBody `protobuf:"bytes,10,opt,name=cryptoAddClaim,proto3,oneof"`
}

type TransactionBody_CryptoCreateAccount struct {
	CryptoCreateAccount *CryptoCreateTransactionBody `protobuf:"bytes,11,opt,name=cryptoCreateAccount,proto3,oneof"`
}

type TransactionBody_CryptoDelete struct {
	CryptoDelete *CryptoDeleteTransactionBody `protobuf:"bytes,12,opt,name=cryptoDelete,proto3,oneof"`
}

type TransactionBody_CryptoDeleteClaim struct {
	CryptoDeleteClaim *CryptoDeleteClaimTransactionBody `protobuf:"bytes,13,opt,name=cryptoDeleteClaim,proto3,oneof"`
}

type TransactionBody_CryptoTransfer struct {
	CryptoTransfer *CryptoTransferTransactionBody `protobuf:"bytes,14,opt,name=cryptoTransfer,proto3,oneof"`
}

type TransactionBody_CryptoUpdateAccount struct {
	CryptoUpdateAccount *CryptoUpdateTransactionBody `protobuf:"bytes,15,opt,name=cryptoUpdateAccount,proto3,oneof"`
}

type TransactionBody_FileAppend struct {
	FileAppend *FileAppendTransactionBody `protobuf:"bytes,16,opt,name=fileAppend,proto3,oneof"`
}

type TransactionBody_FileCreate struct {
	FileCreate *FileCreateTransactionBody `protobuf:"bytes,17,opt,name=fileCreate,proto3,oneof"`
}

type TransactionBody_FileDelete struct {
	FileDelete *FileDeleteTransactionBody `protobuf:"bytes,18,opt,name=fileDelete,proto3,oneof"`
}

type TransactionBody_FileUpdate struct {
	FileUpdate *FileUpdateTransactionBody `protobuf:"bytes,19,opt,name=fileUpdate,proto3,oneof"`
}

func (*TransactionBody_AdminDelete) isTransactionBody_Data() {}

func (*TransactionBody_AdminUndelete) isTransactionBody_Data() {}

func (*TransactionBody_ContractCall) isTransactionBody_Data() {}

func (*TransactionBody_ContractCreateInstance) isTransactionBody_Data() {}

func (*TransactionBody_ContractUpdateInstance) isTransactionBody_Data() {}

func (*TransactionBody_CryptoAddClaim) isTransactionBody_Data() {}

func (*TransactionBody_CryptoCreateAccount) isTransactionBody_Data() {}

func (*TransactionBody_CryptoDelete) isTransactionBody_Data() {}

func (*TransactionBody_CryptoDeleteClaim) isTransactionBody_Data() {}

func (*TransactionBody_CryptoTransfer) isTransactionBody_Data() {}

func (*TransactionBody_CryptoUpdateAccount) isTransactionBody_Data() {}

func (*TransactionBody_FileAppend) isTransactionBody_Data() {}

func (*TransactionBody_FileCreate) isTransactionBody_Data() {}

func (*TransactionBody_FileDelete) isTransactionBody_Data() {}

func (*TransactionBody_FileUpdate) isTransactionBody_Data() {}

func (m *TransactionBody) GetData() isTransactionBody_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *TransactionBody) GetAdminDelete() *AdminDeleteTransactionBody {
	if x, ok := m.GetData().(*TransactionBody_AdminDelete); ok {
		return x.AdminDelete
	}
	return nil
}

func (m *TransactionBody) GetAdminUndelete() *AdminUndeleteTransactionBody {
	if x, ok := m.GetData().(*TransactionBody_AdminUndelete); ok {
		return x.AdminUndelete
	}
	return nil
}

func (m *TransactionBody) GetContractCall() *ContractCallTransactionBody {
	if x, ok := m.GetData().(*TransactionBody_ContractCall); ok {
		return x.ContractCall
	}
	return nil
}

func (m *TransactionBody) GetContractCreateInstance() *ContractCreateTransactionBody {
	if x, ok := m.GetData().(*TransactionBody_ContractCreateInstance); ok {
		return x.ContractCreateInstance
	}
	return nil
}

func (m *TransactionBody) GetContractUpdateInstance() *ContractUpdateTransactionBody {
	if x, ok := m.GetData().(*TransactionBody_ContractUpdateInstance); ok {
		return x.ContractUpdateInstance
	}
	return nil
}

func (m *TransactionBody) GetCryptoAddClaim() *CryptoAddClaimTransactionBody {
	if x, ok := m.GetData().(*TransactionBody_CryptoAddClaim); ok {
		return x.CryptoAddClaim
	}
	return nil
}

func (m *TransactionBody) GetCryptoCreateAccount() *CryptoCreateTransactionBody {
	if x, ok := m.GetData().(*TransactionBody_CryptoCreateAccount); ok {
		return x.CryptoCreateAccount
	}
	return nil
}

func (m *TransactionBody) GetCryptoDelete() *CryptoDeleteTransactionBody {
	if x, ok := m.GetData().(*TransactionBody_CryptoDelete); ok {
		return x.CryptoDelete
	}
	return nil
}

func (m *TransactionBody) GetCryptoDeleteClaim() *CryptoDeleteClaimTransactionBody {
	if x, ok := m.GetData().(*TransactionBody_CryptoDeleteClaim); ok {
		return x.CryptoDeleteClaim
	}
	return nil
}

func (m *TransactionBody) GetCryptoTransfer() *CryptoTransferTransactionBody {
	if x, ok := m.GetData().(*TransactionBody_CryptoTransfer); ok {
		return x.CryptoTransfer
	}
	return nil
}

func (m *TransactionBody) GetCryptoUpdateAccount() *CryptoUpdateTransactionBody {
	if x, ok := m.GetData().(*TransactionBody_CryptoUpdateAccount); ok {
		return x.CryptoUpdateAccount
	}
	return nil
}

func (m *TransactionBody) GetFileAppend() *FileAppendTransactionBody {
	if x, ok := m.GetData().(*TransactionBody_FileAppend); ok {
		return x.FileAppend
	}
	return nil
}

func (m *TransactionBody) GetFileCreate() *FileCreateTransactionBody {
	if x, ok := m.GetData().(*TransactionBody_FileCreate); ok {
		return x.FileCreate
	}
	return nil
}

func (m *TransactionBody) GetFileDelete() *FileDeleteTransactionBody {
	if x, ok := m.GetData().(*TransactionBody_FileDelete); ok {
		return x.FileDelete
	}
	return nil
}

func (m *TransactionBody) GetFileUpdate() *FileUpdateTransactionBody {
	if x, ok := m.GetData().(*TransactionBody_FileUpdate); ok {
		return x.FileUpdate
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*TransactionBody) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _TransactionBody_OneofMarshaler, _TransactionBody_OneofUnmarshaler, _TransactionBody_OneofSizer, []interface{}{
		(*TransactionBody_AdminDelete)(nil),
		(*TransactionBody_AdminUndelete)(nil),
		(*TransactionBody_ContractCall)(nil),
		(*TransactionBody_ContractCreateInstance)(nil),
		(*TransactionBody_ContractUpdateInstance)(nil),
		(*TransactionBody_CryptoAddClaim)(nil),
		(*TransactionBody_CryptoCreateAccount)(nil),
		(*TransactionBody_CryptoDelete)(nil),
		(*TransactionBody_CryptoDeleteClaim)(nil),
		(*TransactionBody_CryptoTransfer)(nil),
		(*TransactionBody_CryptoUpdateAccount)(nil),
		(*TransactionBody_FileAppend)(nil),
		(*TransactionBody_FileCreate)(nil),
		(*TransactionBody_FileDelete)(nil),
		(*TransactionBody_FileUpdate)(nil),
	}
}

func _TransactionBody_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*TransactionBody)
	// data
	switch x := m.Data.(type) {
	case *TransactionBody_AdminDelete:
		b.EncodeVarint(20<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AdminDelete); err != nil {
			return err
		}
	case *TransactionBody_AdminUndelete:
		b.EncodeVarint(21<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AdminUndelete); err != nil {
			return err
		}
	case *TransactionBody_ContractCall:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ContractCall); err != nil {
			return err
		}
	case *TransactionBody_ContractCreateInstance:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ContractCreateInstance); err != nil {
			return err
		}
	case *TransactionBody_ContractUpdateInstance:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ContractUpdateInstance); err != nil {
			return err
		}
	case *TransactionBody_CryptoAddClaim:
		b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CryptoAddClaim); err != nil {
			return err
		}
	case *TransactionBody_CryptoCreateAccount:
		b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CryptoCreateAccount); err != nil {
			return err
		}
	case *TransactionBody_CryptoDelete:
		b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CryptoDelete); err != nil {
			return err
		}
	case *TransactionBody_CryptoDeleteClaim:
		b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CryptoDeleteClaim); err != nil {
			return err
		}
	case *TransactionBody_CryptoTransfer:
		b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CryptoTransfer); err != nil {
			return err
		}
	case *TransactionBody_CryptoUpdateAccount:
		b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CryptoUpdateAccount); err != nil {
			return err
		}
	case *TransactionBody_FileAppend:
		b.EncodeVarint(16<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FileAppend); err != nil {
			return err
		}
	case *TransactionBody_FileCreate:
		b.EncodeVarint(17<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FileCreate); err != nil {
			return err
		}
	case *TransactionBody_FileDelete:
		b.EncodeVarint(18<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FileDelete); err != nil {
			return err
		}
	case *TransactionBody_FileUpdate:
		b.EncodeVarint(19<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FileUpdate); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("TransactionBody.Data has unexpected type %T", x)
	}
	return nil
}

func _TransactionBody_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*TransactionBody)
	switch tag {
	case 20: // data.adminDelete
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AdminDeleteTransactionBody)
		err := b.DecodeMessage(msg)
		m.Data = &TransactionBody_AdminDelete{msg}
		return true, err
	case 21: // data.adminUndelete
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AdminUndeleteTransactionBody)
		err := b.DecodeMessage(msg)
		m.Data = &TransactionBody_AdminUndelete{msg}
		return true, err
	case 7: // data.contractCall
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ContractCallTransactionBody)
		err := b.DecodeMessage(msg)
		m.Data = &TransactionBody_ContractCall{msg}
		return true, err
	case 8: // data.contractCreateInstance
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ContractCreateTransactionBody)
		err := b.DecodeMessage(msg)
		m.Data = &TransactionBody_ContractCreateInstance{msg}
		return true, err
	case 9: // data.contractUpdateInstance
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ContractUpdateTransactionBody)
		err := b.DecodeMessage(msg)
		m.Data = &TransactionBody_ContractUpdateInstance{msg}
		return true, err
	case 10: // data.cryptoAddClaim
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoAddClaimTransactionBody)
		err := b.DecodeMessage(msg)
		m.Data = &TransactionBody_CryptoAddClaim{msg}
		return true, err
	case 11: // data.cryptoCreateAccount
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoCreateTransactionBody)
		err := b.DecodeMessage(msg)
		m.Data = &TransactionBody_CryptoCreateAccount{msg}
		return true, err
	case 12: // data.cryptoDelete
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoDeleteTransactionBody)
		err := b.DecodeMessage(msg)
		m.Data = &TransactionBody_CryptoDelete{msg}
		return true, err
	case 13: // data.cryptoDeleteClaim
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoDeleteClaimTransactionBody)
		err := b.DecodeMessage(msg)
		m.Data = &TransactionBody_CryptoDeleteClaim{msg}
		return true, err
	case 14: // data.cryptoTransfer
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoTransferTransactionBody)
		err := b.DecodeMessage(msg)
		m.Data = &TransactionBody_CryptoTransfer{msg}
		return true, err
	case 15: // data.cryptoUpdateAccount
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoUpdateTransactionBody)
		err := b.DecodeMessage(msg)
		m.Data = &TransactionBody_CryptoUpdateAccount{msg}
		return true, err
	case 16: // data.fileAppend
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FileAppendTransactionBody)
		err := b.DecodeMessage(msg)
		m.Data = &TransactionBody_FileAppend{msg}
		return true, err
	case 17: // data.fileCreate
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FileCreateTransactionBody)
		err := b.DecodeMessage(msg)
		m.Data = &TransactionBody_FileCreate{msg}
		return true, err
	case 18: // data.fileDelete
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FileDeleteTransactionBody)
		err := b.DecodeMessage(msg)
		m.Data = &TransactionBody_FileDelete{msg}
		return true, err
	case 19: // data.fileUpdate
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FileUpdateTransactionBody)
		err := b.DecodeMessage(msg)
		m.Data = &TransactionBody_FileUpdate{msg}
		return true, err
	default:
		return false, nil
	}
}

func _TransactionBody_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*TransactionBody)
	// data
	switch x := m.Data.(type) {
	case *TransactionBody_AdminDelete:
		s := proto.Size(x.AdminDelete)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TransactionBody_AdminUndelete:
		s := proto.Size(x.AdminUndelete)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TransactionBody_ContractCall:
		s := proto.Size(x.ContractCall)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TransactionBody_ContractCreateInstance:
		s := proto.Size(x.ContractCreateInstance)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TransactionBody_ContractUpdateInstance:
		s := proto.Size(x.ContractUpdateInstance)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TransactionBody_CryptoAddClaim:
		s := proto.Size(x.CryptoAddClaim)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TransactionBody_CryptoCreateAccount:
		s := proto.Size(x.CryptoCreateAccount)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TransactionBody_CryptoDelete:
		s := proto.Size(x.CryptoDelete)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TransactionBody_CryptoDeleteClaim:
		s := proto.Size(x.CryptoDeleteClaim)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TransactionBody_CryptoTransfer:
		s := proto.Size(x.CryptoTransfer)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TransactionBody_CryptoUpdateAccount:
		s := proto.Size(x.CryptoUpdateAccount)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TransactionBody_FileAppend:
		s := proto.Size(x.FileAppend)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TransactionBody_FileCreate:
		s := proto.Size(x.FileCreate)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TransactionBody_FileDelete:
		s := proto.Size(x.FileDelete)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TransactionBody_FileUpdate:
		s := proto.Size(x.FileUpdate)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// A single signed transaction, including all its signatures. The SignatureList will have a Signature for each Key in the transaction, either explicit or implicit, in the order that they appear in the transaction. For example, a CryptoTransfer will first have a Signature corresponding to the Key for the paying account, followed by a Signature corresponding to the Key for each account that is sending or receiving cryptocurrency in the transfer.
type Transaction struct {
	Body                 *TransactionBody `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
	Sigs                 *SignatureList   `protobuf:"bytes,2,opt,name=sigs,proto3" json:"sigs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Transaction) Reset()         { *m = Transaction{} }
func (m *Transaction) String() string { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()    {}
func (*Transaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_80613087cbbd34fc, []int{1}
}

func (m *Transaction) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Transaction.Unmarshal(m, b)
}
func (m *Transaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Transaction.Marshal(b, m, deterministic)
}
func (m *Transaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Transaction.Merge(m, src)
}
func (m *Transaction) XXX_Size() int {
	return xxx_messageInfo_Transaction.Size(m)
}
func (m *Transaction) XXX_DiscardUnknown() {
	xxx_messageInfo_Transaction.DiscardUnknown(m)
}

var xxx_messageInfo_Transaction proto.InternalMessageInfo

func (m *Transaction) GetBody() *TransactionBody {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *Transaction) GetSigs() *SignatureList {
	if m != nil {
		return m.Sigs
	}
	return nil
}

func init() {
	proto.RegisterType((*TransactionBody)(nil), "proto.TransactionBody")
	proto.RegisterType((*Transaction)(nil), "proto.Transaction")
}

func init() { proto.RegisterFile("Transaction.proto", fileDescriptor_80613087cbbd34fc) }

var fileDescriptor_80613087cbbd34fc = []byte{
	// 644 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x94, 0x4b, 0x6f, 0x13, 0x3d,
	0x14, 0x86, 0xbf, 0xf9, 0x98, 0x96, 0xd6, 0x69, 0xd2, 0xc4, 0x2d, 0xc5, 0xea, 0x2a, 0x04, 0x54,
	0x22, 0x16, 0x59, 0x80, 0xc4, 0x82, 0x5d, 0x2e, 0x54, 0x8d, 0x8a, 0x10, 0x1a, 0xd2, 0xb2, 0x43,
	0x72, 0x6d, 0x37, 0x19, 0x34, 0xb1, 0x47, 0x1e, 0x07, 0x29, 0xbf, 0x96, 0xbf, 0x82, 0xea, 0xb1,
	0x67, 0xec, 0xb9, 0xb0, 0x6a, 0xf3, 0xfa, 0xbc, 0x8f, 0xe7, 0x5c, 0x7c, 0xc0, 0x60, 0x25, 0x31,
	0xcf, 0x30, 0x51, 0xb1, 0xe0, 0x93, 0x54, 0x0a, 0x25, 0xe0, 0x81, 0xfe, 0x73, 0x39, 0x98, 0xd2,
	0x6d, 0xcc, 0x17, 0x2c, 0x61, 0x8a, 0xe5, 0x27, 0x97, 0x67, 0x5a, 0xba, 0xe3, 0xd4, 0x15, 0xe1,
	0x5c, 0x70, 0x25, 0x31, 0x51, 0x73, 0x9c, 0x24, 0x46, 0x3b, 0x2f, 0x34, 0xc9, 0x70, 0x11, 0x59,
	0xa8, 0x77, 0x29, 0x75, 0x55, 0xb9, 0x4f, 0x95, 0x98, 0x52, 0x3a, 0x4f, 0x70, 0xbc, 0x2d, 0xa8,
	0x5a, 0xf5, 0xfc, 0x46, 0xf3, 0x3e, 0xe9, 0xa5, 0xab, 0xb9, 0x00, 0x83, 0xd5, 0xe9, 0x3d, 0x32,
	0xe9, 0x23, 0xbc, 0x0f, 0xe8, 0x5f, 0xc7, 0x09, 0x9b, 0xa6, 0x29, 0xe3, 0xd4, 0x55, 0xbc, 0xab,
	0xb5, 0xe2, 0x5d, 0xac, 0x15, 0x8f, 0xd3, 0x5b, 0xec, 0x24, 0x2e, 0xeb, 0x78, 0xd9, 0x9f, 0xe1,
	0x2c, 0x26, 0xab, 0x7d, 0xca, 0xb2, 0x5c, 0x19, 0xfd, 0xe9, 0x80, 0x53, 0xa7, 0xde, 0x33, 0x41,
	0xf7, 0xf0, 0x13, 0xe8, 0xaa, 0x52, 0x5a, 0x2e, 0x50, 0x30, 0x0c, 0xc6, 0x9d, 0xf7, 0xe7, 0xb9,
	0x65, 0xb2, 0x72, 0xcf, 0x22, 0x3f, 0x14, 0x7e, 0x04, 0x5d, 0x2e, 0x28, 0x9b, 0x12, 0x22, 0x76,
	0x5c, 0x2d, 0x17, 0xe8, 0x7f, 0xed, 0xed, 0x1b, 0x6f, 0xa1, 0x47, 0x7e, 0x18, 0xbc, 0x02, 0x3d,
	0x07, 0x74, 0xcd, 0x18, 0x7a, 0x36, 0x0c, 0xc6, 0x61, 0x54, 0x51, 0xe1, 0x2d, 0x40, 0x8e, 0x72,
	0x8f, 0x93, 0x98, 0xda, 0x1c, 0x51, 0xa8, 0xaf, 0x3a, 0x35, 0x57, 0x59, 0x39, 0x6a, 0x35, 0x3c,
	0x5d, 0xba, 0x66, 0x9c, 0x49, 0xac, 0x58, 0xc4, 0x88, 0x90, 0x14, 0x1d, 0x0c, 0x83, 0xf1, 0x51,
	0x54, 0x51, 0x21, 0x04, 0xe1, 0x96, 0x6d, 0x05, 0x3a, 0x1c, 0x06, 0xe3, 0xe3, 0x48, 0xff, 0x0f,
	0x3f, 0x83, 0x0e, 0x2e, 0xa7, 0x11, 0x9d, 0xeb, 0xbb, 0x5f, 0xd9, 0x34, 0xcb, 0x93, 0x4a, 0x71,
	0x6f, 0xfe, 0x8b, 0x5c, 0x1f, 0xbc, 0x05, 0x5d, 0xec, 0x4e, 0x30, 0x7a, 0xa1, 0x41, 0xaf, 0x5d,
	0x90, 0x3d, 0xab, 0xa3, 0x7c, 0x2f, 0xbc, 0x01, 0x27, 0xc4, 0x99, 0x7c, 0xf4, 0x5c, 0xb3, 0x46,
	0x86, 0xe5, 0x3e, 0x8a, 0x3a, 0xca, 0x73, 0xc2, 0x9f, 0xe0, 0x82, 0x78, 0xef, 0x65, 0xc9, 0x33,
	0x85, 0x39, 0x61, 0xe8, 0x48, 0x33, 0xdf, 0x54, 0x99, 0x3a, 0xa8, 0x4e, 0x6d, 0xa1, 0xb8, 0xfc,
	0x7c, 0x60, 0x0b, 0xfe, 0x71, 0x23, 0x3f, 0x0f, 0xfa, 0x07, 0xdf, 0xa7, 0xc0, 0xaf, 0xa0, 0x47,
	0xbc, 0x37, 0x8c, 0x80, 0xcf, 0xf5, 0x0e, 0xeb, 0xdc, 0x8a, 0x1b, 0xde, 0x83, 0x33, 0xe2, 0xbc,
	0x7e, 0x33, 0xb7, 0xa8, 0xe3, 0x17, 0xd8, 0x89, 0xa8, 0x23, 0x9b, 0x00, 0xba, 0x63, 0xce, 0xb6,
	0x40, 0x27, 0x0d, 0xc0, 0xb6, 0x39, 0xf2, 0x9c, 0xf0, 0x07, 0x18, 0x90, 0xea, 0xde, 0x41, 0x5d,
	0x8d, 0x7b, 0xdb, 0x80, 0x6b, 0xc9, 0xbb, 0xce, 0x28, 0x4b, 0x69, 0xf7, 0x16, 0xea, 0x35, 0x94,
	0xd2, 0x1e, 0xb6, 0x96, 0xd2, 0x06, 0x94, 0xa5, 0xcc, 0x5b, 0x66, 0x4b, 0x79, 0xda, 0x90, 0x79,
	0x5b, 0xd7, 0x9b, 0x00, 0x70, 0x06, 0xc0, 0x63, 0xb1, 0x35, 0x51, 0x5f, 0xe3, 0x86, 0x06, 0x57,
	0xae, 0xd3, 0x3a, 0xcc, 0x71, 0x59, 0x46, 0xde, 0x23, 0x34, 0xa8, 0x31, 0xda, 0x7a, 0xeb, 0xb8,
	0x2c, 0xc3, 0x34, 0x14, 0xd6, 0x18, 0x6d, 0xed, 0x74, 0x5c, 0x96, 0x91, 0x27, 0x88, 0xce, 0x6a,
	0x8c, 0xb6, 0xc2, 0x38, 0xae, 0xd9, 0x21, 0x08, 0x29, 0x56, 0x78, 0x44, 0x40, 0xc7, 0x09, 0x84,
	0xef, 0x40, 0xf8, 0x20, 0xe8, 0xde, 0xec, 0xf4, 0x8b, 0xfa, 0x4e, 0x7f, 0x42, 0x45, 0x3a, 0x06,
	0x8e, 0x41, 0x98, 0xc5, 0xeb, 0xcc, 0xec, 0x70, 0xbb, 0xff, 0xbf, 0xc7, 0x6b, 0x8e, 0xd5, 0x4e,
	0xb2, 0x2f, 0x71, 0xa6, 0x22, 0x1d, 0x31, 0xbb, 0x02, 0x23, 0x22, 0xb6, 0x93, 0x0d, 0xa3, 0x4c,
	0xe2, 0x0d, 0xce, 0x36, 0x6b, 0x89, 0xd3, 0xcd, 0x04, 0xa7, 0xb1, 0x31, 0xfd, 0xc2, 0xbf, 0xf1,
	0xb7, 0xe0, 0xe1, 0x50, 0xff, 0xfa, 0xf0, 0x37, 0x00, 0x00, 0xff, 0xff, 0x75, 0x88, 0x9b, 0x2a,
	0xe4, 0x07, 0x00, 0x00,
}
