// Code generated by protoc-gen-go. DO NOT EDIT.
// source: FileCreate.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Create a new file, containing the given contents.  It is referenced by its FileID, and does not have a filename, so it is important to get the FileID. After the file is created, the FileID for it can be found in the receipt, or retrieved with a GetByKey query, or by asking for a Record of the transaction to be created, and retrieving that.
//
// The file contains the given contents (possibly empty). The file will automatically disappear at the fileExpirationTime, unless its expiration is extended by another transaction before that time. If the file is deleted, then its contents will become empty and it will be marked as deleted until it expires, and then it will cease to exist. See FileGetInfoQuery for more information about files.
//
// The keys field is a list of keys. All the keys on the list must sign to create or modify a file, but only one of them needs to sign in order to delete the file.  Each of those "keys" may itself be threshold key containing other keys (including other threshold keys). In other words, the behavior is an AND for create/modify, OR for delete. This is useful for acting as a revocation server. If it is desired to have the behavior be AND for all 3 operations (or OR for all 3), then the list should have only a single Key, which is a threshold key, with N=1 for OR, N=M for AND.
//
// An entity (account, file, or smart contract instance) must be created in a particular realm. If the realmID is left null, then a new realm will be created with the given admin key. If a new realm has a null adminKey, then anyone can create/modify/delete entities in that realm. But if an admin key is given, then any transaction to create/modify/delete an entity in that realm must be signed by that key, though anyone can still call functions on smart contract instances that exist in that realm. A realm ceases to exist when everything within it has expired and no longer exists.
//
// The current API ignores shardID, realmID, and newRealmAdminKey, and creates everything in shard 0 and realm 0, with a null key. Future versions of the API will support multiple realms and multiple shards.
type FileCreateTransactionBody struct {
	ExpirationTime       *Timestamp `protobuf:"bytes,2,opt,name=expirationTime,proto3" json:"expirationTime,omitempty"`
	Keys                 *KeyList   `protobuf:"bytes,3,opt,name=keys,proto3" json:"keys,omitempty"`
	Contents             []byte     `protobuf:"bytes,4,opt,name=contents,proto3" json:"contents,omitempty"`
	ShardID              *ShardID   `protobuf:"bytes,5,opt,name=shardID,proto3" json:"shardID,omitempty"`
	RealmID              *RealmID   `protobuf:"bytes,6,opt,name=realmID,proto3" json:"realmID,omitempty"`
	NewRealmAdminKey     *Key       `protobuf:"bytes,7,opt,name=newRealmAdminKey,proto3" json:"newRealmAdminKey,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *FileCreateTransactionBody) Reset()         { *m = FileCreateTransactionBody{} }
func (m *FileCreateTransactionBody) String() string { return proto.CompactTextString(m) }
func (*FileCreateTransactionBody) ProtoMessage()    {}
func (*FileCreateTransactionBody) Descriptor() ([]byte, []int) {
	return fileDescriptor_dce7f6c7fa88f371, []int{0}
}

func (m *FileCreateTransactionBody) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileCreateTransactionBody.Unmarshal(m, b)
}
func (m *FileCreateTransactionBody) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileCreateTransactionBody.Marshal(b, m, deterministic)
}
func (m *FileCreateTransactionBody) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileCreateTransactionBody.Merge(m, src)
}
func (m *FileCreateTransactionBody) XXX_Size() int {
	return xxx_messageInfo_FileCreateTransactionBody.Size(m)
}
func (m *FileCreateTransactionBody) XXX_DiscardUnknown() {
	xxx_messageInfo_FileCreateTransactionBody.DiscardUnknown(m)
}

var xxx_messageInfo_FileCreateTransactionBody proto.InternalMessageInfo

func (m *FileCreateTransactionBody) GetExpirationTime() *Timestamp {
	if m != nil {
		return m.ExpirationTime
	}
	return nil
}

func (m *FileCreateTransactionBody) GetKeys() *KeyList {
	if m != nil {
		return m.Keys
	}
	return nil
}

func (m *FileCreateTransactionBody) GetContents() []byte {
	if m != nil {
		return m.Contents
	}
	return nil
}

func (m *FileCreateTransactionBody) GetShardID() *ShardID {
	if m != nil {
		return m.ShardID
	}
	return nil
}

func (m *FileCreateTransactionBody) GetRealmID() *RealmID {
	if m != nil {
		return m.RealmID
	}
	return nil
}

func (m *FileCreateTransactionBody) GetNewRealmAdminKey() *Key {
	if m != nil {
		return m.NewRealmAdminKey
	}
	return nil
}

func init() {
	proto.RegisterType((*FileCreateTransactionBody)(nil), "proto.FileCreateTransactionBody")
}

func init() { proto.RegisterFile("FileCreate.proto", fileDescriptor_dce7f6c7fa88f371) }

var fileDescriptor_dce7f6c7fa88f371 = []byte{
	// 263 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x8e, 0xcd, 0x4a, 0xc4, 0x30,
	0x14, 0x85, 0xe9, 0x38, 0x3f, 0x12, 0x65, 0x2c, 0x59, 0xc5, 0xae, 0x86, 0x2e, 0xa4, 0xab, 0x2e,
	0x14, 0xc4, 0xad, 0x75, 0x10, 0x86, 0x71, 0x21, 0xb1, 0x2f, 0x70, 0x6d, 0x2f, 0x36, 0x3a, 0x4d,
	0x42, 0x12, 0xd4, 0x3c, 0x8e, 0x6f, 0x2a, 0x4d, 0xe6, 0x87, 0xd1, 0x55, 0xb8, 0xe7, 0x7c, 0xdf,
	0x21, 0x24, 0x7d, 0x14, 0x1b, 0x7c, 0x30, 0x08, 0x0e, 0x4b, 0x6d, 0x94, 0x53, 0x74, 0x12, 0x9e,
	0x2c, 0xad, 0xc0, 0x8a, 0xa6, 0xf6, 0x1a, 0x6d, 0x2c, 0xb2, 0x8b, 0x5a, 0xf4, 0x68, 0x1d, 0xf4,
	0x3a, 0x06, 0xf9, 0xcf, 0x88, 0x5c, 0x1e, 0xf4, 0xda, 0x80, 0xb4, 0xd0, 0x38, 0xa1, 0x64, 0xa5,
	0x5a, 0x4f, 0xef, 0xc8, 0x1c, 0xbf, 0xb5, 0x30, 0x30, 0x24, 0x83, 0xca, 0x46, 0x8b, 0xa4, 0x38,
	0xbb, 0x4e, 0xa3, 0x5d, 0xee, 0xd7, 0xf8, 0x1f, 0x8e, 0xe6, 0x64, 0xfc, 0x81, 0xde, 0xb2, 0x93,
	0xc0, 0xcf, 0xb7, 0xfc, 0x1a, 0xfd, 0x93, 0xb0, 0x8e, 0x87, 0x8e, 0x66, 0xe4, 0xb4, 0x51, 0xd2,
	0xa1, 0x74, 0x96, 0x8d, 0x17, 0x49, 0x71, 0xce, 0xf7, 0x37, 0x2d, 0xc8, 0xcc, 0x76, 0x60, 0xda,
	0xd5, 0x92, 0x4d, 0x8e, 0x26, 0x5e, 0x62, 0xca, 0x77, 0xf5, 0x40, 0x1a, 0x84, 0x4d, 0xbf, 0x5a,
	0xb2, 0xe9, 0x11, 0xc9, 0x63, 0xca, 0x77, 0x35, 0xbd, 0x25, 0xa9, 0xc4, 0xaf, 0x10, 0xdf, 0xb7,
	0xbd, 0x90, 0x6b, 0xf4, 0x6c, 0x16, 0x14, 0x72, 0xf8, 0x1f, 0xff, 0xc7, 0x54, 0x57, 0x24, 0x6f,
	0x54, 0x5f, 0x76, 0xd8, 0xa2, 0x81, 0x0e, 0x6c, 0xf7, 0x66, 0x40, 0x77, 0x25, 0x68, 0xb1, 0xd5,
	0xde, 0xe1, 0x13, 0x9e, 0x93, 0xd7, 0x69, 0xb8, 0x6e, 0x7e, 0x03, 0x00, 0x00, 0xff, 0xff, 0xdc,
	0x30, 0xe9, 0xc6, 0x90, 0x01, 0x00, 0x00,
}
